// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class FullMessage;
class FullMessageDefaultTypeInternal;
extern FullMessageDefaultTypeInternal _FullMessage_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class PlayerAction;
class PlayerActionDefaultTypeInternal;
extern PlayerActionDefaultTypeInternal _PlayerAction_default_instance_;
class PlayerPosition;
class PlayerPositionDefaultTypeInternal;
extern PlayerPositionDefaultTypeInternal _PlayerPosition_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FullMessage* Arena::CreateMaybeMessage<::FullMessage>(Arena*);
template<> ::MessageHeader* Arena::CreateMaybeMessage<::MessageHeader>(Arena*);
template<> ::PlayerAction* Arena::CreateMaybeMessage<::PlayerAction>(Arena*);
template<> ::PlayerPosition* Arena::CreateMaybeMessage<::PlayerPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageType : int {
  UNKNOWN = 0,
  PLAYER_POSITION = 1,
  PLAYER_ACTION = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = UNKNOWN;
constexpr MessageType MessageType_MAX = PLAYER_ACTION;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class MessageHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {};
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .MessageType type = 1;
  void clear_type();
  ::MessageType type() const;
  void set_type(::MessageType value);
  private:
  ::MessageType _internal_type() const;
  void _internal_set_type(::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PlayerPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerPosition) */ {
 public:
  inline PlayerPosition() : PlayerPosition(nullptr) {};
  virtual ~PlayerPosition();

  PlayerPosition(const PlayerPosition& from);
  PlayerPosition(PlayerPosition&& from) noexcept
    : PlayerPosition() {
    *this = ::std::move(from);
  }

  inline PlayerPosition& operator=(const PlayerPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPosition& operator=(PlayerPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPosition* internal_default_instance() {
    return reinterpret_cast<const PlayerPosition*>(
               &_PlayerPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerPosition& a, PlayerPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerPosition* New() const final {
    return CreateMaybeMessage<PlayerPosition>(nullptr);
  }

  PlayerPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerPosition& from);
  void MergeFrom(const PlayerPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerPosition";
  }
  protected:
  explicit PlayerPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PlayerAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerAction) */ {
 public:
  inline PlayerAction() : PlayerAction(nullptr) {};
  virtual ~PlayerAction();

  PlayerAction(const PlayerAction& from);
  PlayerAction(PlayerAction&& from) noexcept
    : PlayerAction() {
    *this = ::std::move(from);
  }

  inline PlayerAction& operator=(const PlayerAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAction& operator=(PlayerAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerAction* internal_default_instance() {
    return reinterpret_cast<const PlayerAction*>(
               &_PlayerAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerAction& a, PlayerAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerAction* New() const final {
    return CreateMaybeMessage<PlayerAction>(nullptr);
  }

  PlayerAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerAction& from);
  void MergeFrom(const PlayerAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerAction";
  }
  protected:
  explicit PlayerAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action(
      std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class FullMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FullMessage) */ {
 public:
  inline FullMessage() : FullMessage(nullptr) {};
  virtual ~FullMessage();

  FullMessage(const FullMessage& from);
  FullMessage(FullMessage&& from) noexcept
    : FullMessage() {
    *this = ::std::move(from);
  }

  inline FullMessage& operator=(const FullMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullMessage& operator=(FullMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullMessage& default_instance();

  enum PayloadCase {
    kPosition = 2,
    kAction = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullMessage* internal_default_instance() {
    return reinterpret_cast<const FullMessage*>(
               &_FullMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FullMessage& a, FullMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FullMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullMessage* New() const final {
    return CreateMaybeMessage<FullMessage>(nullptr);
  }

  FullMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullMessage& from);
  void MergeFrom(const FullMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FullMessage";
  }
  protected:
  explicit FullMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 2,
    kActionFieldNumber = 3,
  };
  // .MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::MessageHeader& header() const;
  ::MessageHeader* release_header();
  ::MessageHeader* mutable_header();
  void set_allocated_header(::MessageHeader* header);
  private:
  const ::MessageHeader& _internal_header() const;
  ::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::MessageHeader* header);
  ::MessageHeader* unsafe_arena_release_header();

  // .PlayerPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::PlayerPosition& position() const;
  ::PlayerPosition* release_position();
  ::PlayerPosition* mutable_position();
  void set_allocated_position(::PlayerPosition* position);
  private:
  const ::PlayerPosition& _internal_position() const;
  ::PlayerPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::PlayerPosition* position);
  ::PlayerPosition* unsafe_arena_release_position();

  // .PlayerAction action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::PlayerAction& action() const;
  ::PlayerAction* release_action();
  ::PlayerAction* mutable_action();
  void set_allocated_action(::PlayerAction* action);
  private:
  const ::PlayerAction& _internal_action() const;
  ::PlayerAction* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::PlayerAction* action);
  ::PlayerAction* unsafe_arena_release_action();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:FullMessage)
 private:
  class _Internal;
  void set_has_position();
  void set_has_action();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MessageHeader* header_;
  union PayloadUnion {
    PayloadUnion() {}
    ::PlayerPosition* position_;
    ::PlayerAction* action_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// .MessageType type = 1;
inline void MessageHeader::clear_type() {
  type_ = 0;
}
inline ::MessageType MessageHeader::_internal_type() const {
  return static_cast< ::MessageType >(type_);
}
inline ::MessageType MessageHeader::type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.type)
  return _internal_type();
}
inline void MessageHeader::_internal_set_type(::MessageType value) {
  
  type_ = value;
}
inline void MessageHeader::set_type(::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MessageHeader.type)
}

// -------------------------------------------------------------------

// PlayerPosition

// int32 player_id = 1;
inline void PlayerPosition::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerPosition::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.player_id)
  return _internal_player_id();
}
inline void PlayerPosition::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void PlayerPosition::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.player_id)
}

// float x = 2;
inline void PlayerPosition::clear_x() {
  x_ = 0;
}
inline float PlayerPosition::_internal_x() const {
  return x_;
}
inline float PlayerPosition::x() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.x)
  return _internal_x();
}
inline void PlayerPosition::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.x)
}

// float y = 3;
inline void PlayerPosition::clear_y() {
  y_ = 0;
}
inline float PlayerPosition::_internal_y() const {
  return y_;
}
inline float PlayerPosition::y() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.y)
  return _internal_y();
}
inline void PlayerPosition::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.y)
}

// float z = 4;
inline void PlayerPosition::clear_z() {
  z_ = 0;
}
inline float PlayerPosition::_internal_z() const {
  return z_;
}
inline float PlayerPosition::z() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.z)
  return _internal_z();
}
inline void PlayerPosition::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PlayerPosition::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PlayerPosition.z)
}

// -------------------------------------------------------------------

// PlayerAction

// int32 player_id = 1;
inline void PlayerAction::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAction::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAction::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerAction.player_id)
  return _internal_player_id();
}
inline void PlayerAction::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void PlayerAction::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerAction.player_id)
}

// string action = 2;
inline void PlayerAction::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerAction::action() const {
  // @@protoc_insertion_point(field_get:PlayerAction.action)
  return _internal_action();
}
inline void PlayerAction::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:PlayerAction.action)
}
inline std::string* PlayerAction::mutable_action() {
  // @@protoc_insertion_point(field_mutable:PlayerAction.action)
  return _internal_mutable_action();
}
inline const std::string& PlayerAction::_internal_action() const {
  return action_.Get();
}
inline void PlayerAction::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerAction::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerAction.action)
}
inline void PlayerAction::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerAction.action)
}
inline void PlayerAction::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerAction.action)
}
inline std::string* PlayerAction::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerAction::release_action() {
  // @@protoc_insertion_point(field_release:PlayerAction.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerAction::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerAction.action)
}
inline std::string* PlayerAction::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlayerAction.action)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerAction::unsafe_arena_set_allocated_action(
    std::string* action) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action != nullptr) {
    
  } else {
    
  }
  action_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerAction.action)
}

// -------------------------------------------------------------------

// FullMessage

// .MessageHeader header = 1;
inline bool FullMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool FullMessage::has_header() const {
  return _internal_has_header();
}
inline void FullMessage::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::MessageHeader& FullMessage::_internal_header() const {
  const ::MessageHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageHeader*>(
      &::_MessageHeader_default_instance_);
}
inline const ::MessageHeader& FullMessage::header() const {
  // @@protoc_insertion_point(field_get:FullMessage.header)
  return _internal_header();
}
inline void FullMessage::unsafe_arena_set_allocated_header(
    ::MessageHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.header)
}
inline ::MessageHeader* FullMessage::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MessageHeader* FullMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:FullMessage.header)
  
  ::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::MessageHeader* FullMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::MessageHeader* FullMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:FullMessage.header)
  return _internal_mutable_header();
}
inline void FullMessage::set_allocated_header(::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:FullMessage.header)
}

// .PlayerPosition position = 2;
inline bool FullMessage::_internal_has_position() const {
  return payload_case() == kPosition;
}
inline bool FullMessage::has_position() const {
  return _internal_has_position();
}
inline void FullMessage::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void FullMessage::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete payload_.position_;
    }
    clear_has_payload();
  }
}
inline ::PlayerPosition* FullMessage::release_position() {
  // @@protoc_insertion_point(field_release:FullMessage.position)
  if (_internal_has_position()) {
    clear_has_payload();
      ::PlayerPosition* temp = payload_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlayerPosition& FullMessage::_internal_position() const {
  return _internal_has_position()
      ? *payload_.position_
      : *reinterpret_cast< ::PlayerPosition*>(&::_PlayerPosition_default_instance_);
}
inline const ::PlayerPosition& FullMessage::position() const {
  // @@protoc_insertion_point(field_get:FullMessage.position)
  return _internal_position();
}
inline ::PlayerPosition* FullMessage::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.position)
  if (_internal_has_position()) {
    clear_has_payload();
    ::PlayerPosition* temp = payload_.position_;
    payload_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_position(::PlayerPosition* position) {
  clear_payload();
  if (position) {
    set_has_position();
    payload_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.position)
}
inline ::PlayerPosition* FullMessage::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_payload();
    set_has_position();
    payload_.position_ = CreateMaybeMessage< ::PlayerPosition >(GetArena());
  }
  return payload_.position_;
}
inline ::PlayerPosition* FullMessage::mutable_position() {
  // @@protoc_insertion_point(field_mutable:FullMessage.position)
  return _internal_mutable_position();
}

// .PlayerAction action = 3;
inline bool FullMessage::_internal_has_action() const {
  return payload_case() == kAction;
}
inline bool FullMessage::has_action() const {
  return _internal_has_action();
}
inline void FullMessage::set_has_action() {
  _oneof_case_[0] = kAction;
}
inline void FullMessage::clear_action() {
  if (_internal_has_action()) {
    if (GetArena() == nullptr) {
      delete payload_.action_;
    }
    clear_has_payload();
  }
}
inline ::PlayerAction* FullMessage::release_action() {
  // @@protoc_insertion_point(field_release:FullMessage.action)
  if (_internal_has_action()) {
    clear_has_payload();
      ::PlayerAction* temp = payload_.action_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlayerAction& FullMessage::_internal_action() const {
  return _internal_has_action()
      ? *payload_.action_
      : *reinterpret_cast< ::PlayerAction*>(&::_PlayerAction_default_instance_);
}
inline const ::PlayerAction& FullMessage::action() const {
  // @@protoc_insertion_point(field_get:FullMessage.action)
  return _internal_action();
}
inline ::PlayerAction* FullMessage::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.action)
  if (_internal_has_action()) {
    clear_has_payload();
    ::PlayerAction* temp = payload_.action_;
    payload_.action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_action(::PlayerAction* action) {
  clear_payload();
  if (action) {
    set_has_action();
    payload_.action_ = action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.action)
}
inline ::PlayerAction* FullMessage::_internal_mutable_action() {
  if (!_internal_has_action()) {
    clear_payload();
    set_has_action();
    payload_.action_ = CreateMaybeMessage< ::PlayerAction >(GetArena());
  }
  return payload_.action_;
}
inline ::PlayerAction* FullMessage::mutable_action() {
  // @@protoc_insertion_point(field_mutable:FullMessage.action)
  return _internal_mutable_action();
}

inline bool FullMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void FullMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline FullMessage::PayloadCase FullMessage::payload_case() const {
  return FullMessage::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
