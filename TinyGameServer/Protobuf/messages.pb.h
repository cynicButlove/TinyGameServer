// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class AnimatorParamMsg;
class AnimatorParamMsgDefaultTypeInternal;
extern AnimatorParamMsgDefaultTypeInternal _AnimatorParamMsg_default_instance_;
class BulletHitMsg;
class BulletHitMsgDefaultTypeInternal;
extern BulletHitMsgDefaultTypeInternal _BulletHitMsg_default_instance_;
class ClientMsg;
class ClientMsgDefaultTypeInternal;
extern ClientMsgDefaultTypeInternal _ClientMsg_default_instance_;
class FullMessage;
class FullMessageDefaultTypeInternal;
extern FullMessageDefaultTypeInternal _FullMessage_default_instance_;
class GunFireMsg;
class GunFireMsgDefaultTypeInternal;
extern GunFireMsgDefaultTypeInternal _GunFireMsg_default_instance_;
class GunInfoMsg;
class GunInfoMsgDefaultTypeInternal;
extern GunInfoMsgDefaultTypeInternal _GunInfoMsg_default_instance_;
class LoadOtherPlayersMsg;
class LoadOtherPlayersMsgDefaultTypeInternal;
extern LoadOtherPlayersMsgDefaultTypeInternal _LoadOtherPlayersMsg_default_instance_;
class LoginInRequest;
class LoginInRequestDefaultTypeInternal;
extern LoginInRequestDefaultTypeInternal _LoginInRequest_default_instance_;
class LoginInResponse;
class LoginInResponseDefaultTypeInternal;
extern LoginInResponseDefaultTypeInternal _LoginInResponse_default_instance_;
class LogoutMsg;
class LogoutMsgDefaultTypeInternal;
extern LogoutMsgDefaultTypeInternal _LogoutMsg_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class PlayerLoginMsg;
class PlayerLoginMsgDefaultTypeInternal;
extern PlayerLoginMsgDefaultTypeInternal _PlayerLoginMsg_default_instance_;
class PlayerPositionMsg;
class PlayerPositionMsgDefaultTypeInternal;
extern PlayerPositionMsgDefaultTypeInternal _PlayerPositionMsg_default_instance_;
class PlayerStateMsg;
class PlayerStateMsgDefaultTypeInternal;
extern PlayerStateMsgDefaultTypeInternal _PlayerStateMsg_default_instance_;
class RankListMsg;
class RankListMsgDefaultTypeInternal;
extern RankListMsgDefaultTypeInternal _RankListMsg_default_instance_;
class RankScoreMsg;
class RankScoreMsgDefaultTypeInternal;
extern RankScoreMsgDefaultTypeInternal _RankScoreMsg_default_instance_;
class ReloadBulletMsg;
class ReloadBulletMsgDefaultTypeInternal;
extern ReloadBulletMsgDefaultTypeInternal _ReloadBulletMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AnimatorParamMsg* Arena::CreateMaybeMessage<::AnimatorParamMsg>(Arena*);
template<> ::BulletHitMsg* Arena::CreateMaybeMessage<::BulletHitMsg>(Arena*);
template<> ::ClientMsg* Arena::CreateMaybeMessage<::ClientMsg>(Arena*);
template<> ::FullMessage* Arena::CreateMaybeMessage<::FullMessage>(Arena*);
template<> ::GunFireMsg* Arena::CreateMaybeMessage<::GunFireMsg>(Arena*);
template<> ::GunInfoMsg* Arena::CreateMaybeMessage<::GunInfoMsg>(Arena*);
template<> ::LoadOtherPlayersMsg* Arena::CreateMaybeMessage<::LoadOtherPlayersMsg>(Arena*);
template<> ::LoginInRequest* Arena::CreateMaybeMessage<::LoginInRequest>(Arena*);
template<> ::LoginInResponse* Arena::CreateMaybeMessage<::LoginInResponse>(Arena*);
template<> ::LogoutMsg* Arena::CreateMaybeMessage<::LogoutMsg>(Arena*);
template<> ::MessageHeader* Arena::CreateMaybeMessage<::MessageHeader>(Arena*);
template<> ::PlayerLoginMsg* Arena::CreateMaybeMessage<::PlayerLoginMsg>(Arena*);
template<> ::PlayerPositionMsg* Arena::CreateMaybeMessage<::PlayerPositionMsg>(Arena*);
template<> ::PlayerStateMsg* Arena::CreateMaybeMessage<::PlayerStateMsg>(Arena*);
template<> ::RankListMsg* Arena::CreateMaybeMessage<::RankListMsg>(Arena*);
template<> ::RankScoreMsg* Arena::CreateMaybeMessage<::RankScoreMsg>(Arena*);
template<> ::ReloadBulletMsg* Arena::CreateMaybeMessage<::ReloadBulletMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageType : int {
  UNKNOWN = 0,
  LOGIN_IN_REQ = 1,
  LOGIN_IN_RSP = 2,
  PLAYER_LOGIN = 3,
  LoadOtherPlayers = 4,
  PLAYER_State = 5,
  GunInfo = 6,
  GunFire = 7,
  ReloadBullet = 8,
  BulletHit = 9,
  AnimatorParam = 10,
  Logout = 11,
  RankScore = 12,
  RankList = 13,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = UNKNOWN;
constexpr MessageType MessageType_MAX = RankList;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class MessageHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {};
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .MessageType Type = 1;
  void clear_type();
  ::MessageType type() const;
  void set_type(::MessageType value);
  private:
  ::MessageType _internal_type() const;
  void _internal_set_type(::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class LoginInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginInRequest) */ {
 public:
  inline LoginInRequest() : LoginInRequest(nullptr) {};
  virtual ~LoginInRequest();

  LoginInRequest(const LoginInRequest& from);
  LoginInRequest(LoginInRequest&& from) noexcept
    : LoginInRequest() {
    *this = ::std::move(from);
  }

  inline LoginInRequest& operator=(const LoginInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginInRequest& operator=(LoginInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginInRequest* internal_default_instance() {
    return reinterpret_cast<const LoginInRequest*>(
               &_LoginInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginInRequest& a, LoginInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginInRequest* New() const final {
    return CreateMaybeMessage<LoginInRequest>(nullptr);
  }

  LoginInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginInRequest& from);
  void MergeFrom(const LoginInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginInRequest";
  }
  protected:
  explicit LoginInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:LoginInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ClientMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMsg) */ {
 public:
  inline ClientMsg() : ClientMsg(nullptr) {};
  virtual ~ClientMsg();

  ClientMsg(const ClientMsg& from);
  ClientMsg(ClientMsg&& from) noexcept
    : ClientMsg() {
    *this = ::std::move(from);
  }

  inline ClientMsg& operator=(const ClientMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMsg& operator=(ClientMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMsg* internal_default_instance() {
    return reinterpret_cast<const ClientMsg*>(
               &_ClientMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientMsg& a, ClientMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMsg* New() const final {
    return CreateMaybeMessage<ClientMsg>(nullptr);
  }

  ClientMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMsg& from);
  void MergeFrom(const ClientMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMsg";
  }
  protected:
  explicit ClientMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kGunNameFieldNumber = 6,
    kPositionFieldNumber = 4,
    kClientIdFieldNumber = 1,
    kStateFieldNumber = 3,
    kHealthFieldNumber = 5,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string gun_name = 6;
  void clear_gun_name();
  const std::string& gun_name() const;
  void set_gun_name(const std::string& value);
  void set_gun_name(std::string&& value);
  void set_gun_name(const char* value);
  void set_gun_name(const char* value, size_t size);
  std::string* mutable_gun_name();
  std::string* release_gun_name();
  void set_allocated_gun_name(std::string* gun_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gun_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gun_name(
      std::string* gun_name);
  private:
  const std::string& _internal_gun_name() const;
  void _internal_set_gun_name(const std::string& value);
  std::string* _internal_mutable_gun_name();
  public:

  // .PlayerPositionMsg position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::PlayerPositionMsg& position() const;
  ::PlayerPositionMsg* release_position();
  ::PlayerPositionMsg* mutable_position();
  void set_allocated_position(::PlayerPositionMsg* position);
  private:
  const ::PlayerPositionMsg& _internal_position() const;
  ::PlayerPositionMsg* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::PlayerPositionMsg* position);
  ::PlayerPositionMsg* unsafe_arena_release_position();

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 health = 5;
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::int32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gun_name_;
  ::PlayerPositionMsg* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class LoginInResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginInResponse) */ {
 public:
  inline LoginInResponse() : LoginInResponse(nullptr) {};
  virtual ~LoginInResponse();

  LoginInResponse(const LoginInResponse& from);
  LoginInResponse(LoginInResponse&& from) noexcept
    : LoginInResponse() {
    *this = ::std::move(from);
  }

  inline LoginInResponse& operator=(const LoginInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginInResponse& operator=(LoginInResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginInResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginInResponse* internal_default_instance() {
    return reinterpret_cast<const LoginInResponse*>(
               &_LoginInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginInResponse& a, LoginInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginInResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginInResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginInResponse* New() const final {
    return CreateMaybeMessage<LoginInResponse>(nullptr);
  }

  LoginInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginInResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginInResponse& from);
  void MergeFrom(const LoginInResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginInResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginInResponse";
  }
  protected:
  explicit LoginInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kErrorNoFieldNumber = 2,
  };
  // .ClientMsg client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ClientMsg& client() const;
  ::ClientMsg* release_client();
  ::ClientMsg* mutable_client();
  void set_allocated_client(::ClientMsg* client);
  private:
  const ::ClientMsg& _internal_client() const;
  ::ClientMsg* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::ClientMsg* client);
  ::ClientMsg* unsafe_arena_release_client();

  // int32 error_no = 2;
  void clear_error_no();
  ::PROTOBUF_NAMESPACE_ID::int32 error_no() const;
  void set_error_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_no() const;
  void _internal_set_error_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginInResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ClientMsg* client_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class LoadOtherPlayersMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoadOtherPlayersMsg) */ {
 public:
  inline LoadOtherPlayersMsg() : LoadOtherPlayersMsg(nullptr) {};
  virtual ~LoadOtherPlayersMsg();

  LoadOtherPlayersMsg(const LoadOtherPlayersMsg& from);
  LoadOtherPlayersMsg(LoadOtherPlayersMsg&& from) noexcept
    : LoadOtherPlayersMsg() {
    *this = ::std::move(from);
  }

  inline LoadOtherPlayersMsg& operator=(const LoadOtherPlayersMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadOtherPlayersMsg& operator=(LoadOtherPlayersMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadOtherPlayersMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadOtherPlayersMsg* internal_default_instance() {
    return reinterpret_cast<const LoadOtherPlayersMsg*>(
               &_LoadOtherPlayersMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoadOtherPlayersMsg& a, LoadOtherPlayersMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadOtherPlayersMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadOtherPlayersMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadOtherPlayersMsg* New() const final {
    return CreateMaybeMessage<LoadOtherPlayersMsg>(nullptr);
  }

  LoadOtherPlayersMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadOtherPlayersMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadOtherPlayersMsg& from);
  void MergeFrom(const LoadOtherPlayersMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadOtherPlayersMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoadOtherPlayersMsg";
  }
  protected:
  explicit LoadOtherPlayersMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherClientsFieldNumber = 1,
  };
  // repeated .ClientMsg otherClients = 1;
  int otherclients_size() const;
  private:
  int _internal_otherclients_size() const;
  public:
  void clear_otherclients();
  ::ClientMsg* mutable_otherclients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientMsg >*
      mutable_otherclients();
  private:
  const ::ClientMsg& _internal_otherclients(int index) const;
  ::ClientMsg* _internal_add_otherclients();
  public:
  const ::ClientMsg& otherclients(int index) const;
  ::ClientMsg* add_otherclients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientMsg >&
      otherclients() const;

  // @@protoc_insertion_point(class_scope:LoadOtherPlayersMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientMsg > otherclients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PlayerLoginMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerLoginMsg) */ {
 public:
  inline PlayerLoginMsg() : PlayerLoginMsg(nullptr) {};
  virtual ~PlayerLoginMsg();

  PlayerLoginMsg(const PlayerLoginMsg& from);
  PlayerLoginMsg(PlayerLoginMsg&& from) noexcept
    : PlayerLoginMsg() {
    *this = ::std::move(from);
  }

  inline PlayerLoginMsg& operator=(const PlayerLoginMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLoginMsg& operator=(PlayerLoginMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLoginMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginMsg* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginMsg*>(
               &_PlayerLoginMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerLoginMsg& a, PlayerLoginMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLoginMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerLoginMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginMsg* New() const final {
    return CreateMaybeMessage<PlayerLoginMsg>(nullptr);
  }

  PlayerLoginMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLoginMsg& from);
  void MergeFrom(const PlayerLoginMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerLoginMsg";
  }
  protected:
  explicit PlayerLoginMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
  };
  // .ClientMsg client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ClientMsg& client() const;
  ::ClientMsg* release_client();
  ::ClientMsg* mutable_client();
  void set_allocated_client(::ClientMsg* client);
  private:
  const ::ClientMsg& _internal_client() const;
  ::ClientMsg* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::ClientMsg* client);
  ::ClientMsg* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:PlayerLoginMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ClientMsg* client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PlayerPositionMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerPositionMsg) */ {
 public:
  inline PlayerPositionMsg() : PlayerPositionMsg(nullptr) {};
  virtual ~PlayerPositionMsg();

  PlayerPositionMsg(const PlayerPositionMsg& from);
  PlayerPositionMsg(PlayerPositionMsg&& from) noexcept
    : PlayerPositionMsg() {
    *this = ::std::move(from);
  }

  inline PlayerPositionMsg& operator=(const PlayerPositionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPositionMsg& operator=(PlayerPositionMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerPositionMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPositionMsg* internal_default_instance() {
    return reinterpret_cast<const PlayerPositionMsg*>(
               &_PlayerPositionMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerPositionMsg& a, PlayerPositionMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPositionMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPositionMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerPositionMsg* New() const final {
    return CreateMaybeMessage<PlayerPositionMsg>(nullptr);
  }

  PlayerPositionMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPositionMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerPositionMsg& from);
  void MergeFrom(const PlayerPositionMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPositionMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerPositionMsg";
  }
  protected:
  explicit PlayerPositionMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRotationXFieldNumber = 4,
    kRotationYFieldNumber = 5,
    kRotationZFieldNumber = 6,
    kGunRotationXFieldNumber = 7,
    kGunRotationYFieldNumber = 8,
    kGunRotationZFieldNumber = 9,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float rotation_x = 4;
  void clear_rotation_x();
  float rotation_x() const;
  void set_rotation_x(float value);
  private:
  float _internal_rotation_x() const;
  void _internal_set_rotation_x(float value);
  public:

  // float rotation_y = 5;
  void clear_rotation_y();
  float rotation_y() const;
  void set_rotation_y(float value);
  private:
  float _internal_rotation_y() const;
  void _internal_set_rotation_y(float value);
  public:

  // float rotation_z = 6;
  void clear_rotation_z();
  float rotation_z() const;
  void set_rotation_z(float value);
  private:
  float _internal_rotation_z() const;
  void _internal_set_rotation_z(float value);
  public:

  // float gun_rotation_x = 7;
  void clear_gun_rotation_x();
  float gun_rotation_x() const;
  void set_gun_rotation_x(float value);
  private:
  float _internal_gun_rotation_x() const;
  void _internal_set_gun_rotation_x(float value);
  public:

  // float gun_rotation_y = 8;
  void clear_gun_rotation_y();
  float gun_rotation_y() const;
  void set_gun_rotation_y(float value);
  private:
  float _internal_gun_rotation_y() const;
  void _internal_set_gun_rotation_y(float value);
  public:

  // float gun_rotation_z = 9;
  void clear_gun_rotation_z();
  float gun_rotation_z() const;
  void set_gun_rotation_z(float value);
  private:
  float _internal_gun_rotation_z() const;
  void _internal_set_gun_rotation_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerPositionMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float rotation_x_;
  float rotation_y_;
  float rotation_z_;
  float gun_rotation_x_;
  float gun_rotation_y_;
  float gun_rotation_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PlayerStateMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerStateMsg) */ {
 public:
  inline PlayerStateMsg() : PlayerStateMsg(nullptr) {};
  virtual ~PlayerStateMsg();

  PlayerStateMsg(const PlayerStateMsg& from);
  PlayerStateMsg(PlayerStateMsg&& from) noexcept
    : PlayerStateMsg() {
    *this = ::std::move(from);
  }

  inline PlayerStateMsg& operator=(const PlayerStateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerStateMsg& operator=(PlayerStateMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerStateMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerStateMsg* internal_default_instance() {
    return reinterpret_cast<const PlayerStateMsg*>(
               &_PlayerStateMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerStateMsg& a, PlayerStateMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerStateMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerStateMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerStateMsg* New() const final {
    return CreateMaybeMessage<PlayerStateMsg>(nullptr);
  }

  PlayerStateMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerStateMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerStateMsg& from);
  void MergeFrom(const PlayerStateMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStateMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerStateMsg";
  }
  protected:
  explicit PlayerStateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
  };
  // .ClientMsg client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ClientMsg& client() const;
  ::ClientMsg* release_client();
  ::ClientMsg* mutable_client();
  void set_allocated_client(::ClientMsg* client);
  private:
  const ::ClientMsg& _internal_client() const;
  ::ClientMsg* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::ClientMsg* client);
  ::ClientMsg* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:PlayerStateMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ClientMsg* client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GunInfoMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GunInfoMsg) */ {
 public:
  inline GunInfoMsg() : GunInfoMsg(nullptr) {};
  virtual ~GunInfoMsg();

  GunInfoMsg(const GunInfoMsg& from);
  GunInfoMsg(GunInfoMsg&& from) noexcept
    : GunInfoMsg() {
    *this = ::std::move(from);
  }

  inline GunInfoMsg& operator=(const GunInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunInfoMsg& operator=(GunInfoMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunInfoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GunInfoMsg* internal_default_instance() {
    return reinterpret_cast<const GunInfoMsg*>(
               &_GunInfoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GunInfoMsg& a, GunInfoMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GunInfoMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunInfoMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunInfoMsg* New() const final {
    return CreateMaybeMessage<GunInfoMsg>(nullptr);
  }

  GunInfoMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunInfoMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunInfoMsg& from);
  void MergeFrom(const GunInfoMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunInfoMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GunInfoMsg";
  }
  protected:
  explicit GunInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGunNameFieldNumber = 2,
    kClientIdFieldNumber = 1,
    kThrowFieldNumber = 3,
  };
  // string gun_name = 2;
  void clear_gun_name();
  const std::string& gun_name() const;
  void set_gun_name(const std::string& value);
  void set_gun_name(std::string&& value);
  void set_gun_name(const char* value);
  void set_gun_name(const char* value, size_t size);
  std::string* mutable_gun_name();
  std::string* release_gun_name();
  void set_allocated_gun_name(std::string* gun_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gun_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gun_name(
      std::string* gun_name);
  private:
  const std::string& _internal_gun_name() const;
  void _internal_set_gun_name(const std::string& value);
  std::string* _internal_mutable_gun_name();
  public:

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 throw = 3;
  void clear_throw_();
  ::PROTOBUF_NAMESPACE_ID::int32 throw_() const;
  void set_throw_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_throw_() const;
  void _internal_set_throw_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GunInfoMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gun_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 throw__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GunFireMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GunFireMsg) */ {
 public:
  inline GunFireMsg() : GunFireMsg(nullptr) {};
  virtual ~GunFireMsg();

  GunFireMsg(const GunFireMsg& from);
  GunFireMsg(GunFireMsg&& from) noexcept
    : GunFireMsg() {
    *this = ::std::move(from);
  }

  inline GunFireMsg& operator=(const GunFireMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunFireMsg& operator=(GunFireMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunFireMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GunFireMsg* internal_default_instance() {
    return reinterpret_cast<const GunFireMsg*>(
               &_GunFireMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GunFireMsg& a, GunFireMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GunFireMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunFireMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunFireMsg* New() const final {
    return CreateMaybeMessage<GunFireMsg>(nullptr);
  }

  GunFireMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunFireMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunFireMsg& from);
  void MergeFrom(const GunFireMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunFireMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GunFireMsg";
  }
  protected:
  explicit GunFireMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kShootDirectionXFieldNumber = 2,
    kShootDirectionYFieldNumber = 3,
    kShootDirectionZFieldNumber = 4,
  };
  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float shootDirection_x = 2;
  void clear_shootdirection_x();
  float shootdirection_x() const;
  void set_shootdirection_x(float value);
  private:
  float _internal_shootdirection_x() const;
  void _internal_set_shootdirection_x(float value);
  public:

  // float shootDirection_y = 3;
  void clear_shootdirection_y();
  float shootdirection_y() const;
  void set_shootdirection_y(float value);
  private:
  float _internal_shootdirection_y() const;
  void _internal_set_shootdirection_y(float value);
  public:

  // float shootDirection_z = 4;
  void clear_shootdirection_z();
  float shootdirection_z() const;
  void set_shootdirection_z(float value);
  private:
  float _internal_shootdirection_z() const;
  void _internal_set_shootdirection_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:GunFireMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  float shootdirection_x_;
  float shootdirection_y_;
  float shootdirection_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReloadBulletMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReloadBulletMsg) */ {
 public:
  inline ReloadBulletMsg() : ReloadBulletMsg(nullptr) {};
  virtual ~ReloadBulletMsg();

  ReloadBulletMsg(const ReloadBulletMsg& from);
  ReloadBulletMsg(ReloadBulletMsg&& from) noexcept
    : ReloadBulletMsg() {
    *this = ::std::move(from);
  }

  inline ReloadBulletMsg& operator=(const ReloadBulletMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadBulletMsg& operator=(ReloadBulletMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReloadBulletMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReloadBulletMsg* internal_default_instance() {
    return reinterpret_cast<const ReloadBulletMsg*>(
               &_ReloadBulletMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReloadBulletMsg& a, ReloadBulletMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadBulletMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadBulletMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReloadBulletMsg* New() const final {
    return CreateMaybeMessage<ReloadBulletMsg>(nullptr);
  }

  ReloadBulletMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReloadBulletMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReloadBulletMsg& from);
  void MergeFrom(const ReloadBulletMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadBulletMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReloadBulletMsg";
  }
  protected:
  explicit ReloadBulletMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kBulletCountFieldNumber = 2,
  };
  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bulletCount = 2;
  void clear_bulletcount();
  ::PROTOBUF_NAMESPACE_ID::int32 bulletcount() const;
  void set_bulletcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bulletcount() const;
  void _internal_set_bulletcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReloadBulletMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bulletcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class BulletHitMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BulletHitMsg) */ {
 public:
  inline BulletHitMsg() : BulletHitMsg(nullptr) {};
  virtual ~BulletHitMsg();

  BulletHitMsg(const BulletHitMsg& from);
  BulletHitMsg(BulletHitMsg&& from) noexcept
    : BulletHitMsg() {
    *this = ::std::move(from);
  }

  inline BulletHitMsg& operator=(const BulletHitMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulletHitMsg& operator=(BulletHitMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulletHitMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulletHitMsg* internal_default_instance() {
    return reinterpret_cast<const BulletHitMsg*>(
               &_BulletHitMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BulletHitMsg& a, BulletHitMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BulletHitMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulletHitMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulletHitMsg* New() const final {
    return CreateMaybeMessage<BulletHitMsg>(nullptr);
  }

  BulletHitMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulletHitMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulletHitMsg& from);
  void MergeFrom(const BulletHitMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulletHitMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BulletHitMsg";
  }
  protected:
  explicit BulletHitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kHealthFieldNumber = 2,
  };
  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 health = 2;
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::int32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BulletHitMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class AnimatorParamMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AnimatorParamMsg) */ {
 public:
  inline AnimatorParamMsg() : AnimatorParamMsg(nullptr) {};
  virtual ~AnimatorParamMsg();

  AnimatorParamMsg(const AnimatorParamMsg& from);
  AnimatorParamMsg(AnimatorParamMsg&& from) noexcept
    : AnimatorParamMsg() {
    *this = ::std::move(from);
  }

  inline AnimatorParamMsg& operator=(const AnimatorParamMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimatorParamMsg& operator=(AnimatorParamMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimatorParamMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimatorParamMsg* internal_default_instance() {
    return reinterpret_cast<const AnimatorParamMsg*>(
               &_AnimatorParamMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AnimatorParamMsg& a, AnimatorParamMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimatorParamMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimatorParamMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimatorParamMsg* New() const final {
    return CreateMaybeMessage<AnimatorParamMsg>(nullptr);
  }

  AnimatorParamMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimatorParamMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimatorParamMsg& from);
  void MergeFrom(const AnimatorParamMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimatorParamMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AnimatorParamMsg";
  }
  protected:
  explicit AnimatorParamMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 2,
    kGunNameFieldNumber = 4,
    kClientIdFieldNumber = 1,
    kValueFieldNumber = 3,
  };
  // string paramName = 2;
  void clear_paramname();
  const std::string& paramname() const;
  void set_paramname(const std::string& value);
  void set_paramname(std::string&& value);
  void set_paramname(const char* value);
  void set_paramname(const char* value, size_t size);
  std::string* mutable_paramname();
  std::string* release_paramname();
  void set_allocated_paramname(std::string* paramname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramname(
      std::string* paramname);
  private:
  const std::string& _internal_paramname() const;
  void _internal_set_paramname(const std::string& value);
  std::string* _internal_mutable_paramname();
  public:

  // string gunName = 4;
  void clear_gunname();
  const std::string& gunname() const;
  void set_gunname(const std::string& value);
  void set_gunname(std::string&& value);
  void set_gunname(const char* value);
  void set_gunname(const char* value, size_t size);
  std::string* mutable_gunname();
  std::string* release_gunname();
  void set_allocated_gunname(std::string* gunname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gunname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gunname(
      std::string* gunname);
  private:
  const std::string& _internal_gunname() const;
  void _internal_set_gunname(const std::string& value);
  std::string* _internal_mutable_gunname();
  public:

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AnimatorParamMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gunname_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class LogoutMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogoutMsg) */ {
 public:
  inline LogoutMsg() : LogoutMsg(nullptr) {};
  virtual ~LogoutMsg();

  LogoutMsg(const LogoutMsg& from);
  LogoutMsg(LogoutMsg&& from) noexcept
    : LogoutMsg() {
    *this = ::std::move(from);
  }

  inline LogoutMsg& operator=(const LogoutMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutMsg& operator=(LogoutMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutMsg* internal_default_instance() {
    return reinterpret_cast<const LogoutMsg*>(
               &_LogoutMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LogoutMsg& a, LogoutMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutMsg* New() const final {
    return CreateMaybeMessage<LogoutMsg>(nullptr);
  }

  LogoutMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutMsg& from);
  void MergeFrom(const LogoutMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogoutMsg";
  }
  protected:
  explicit LogoutMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogoutMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class RankScoreMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankScoreMsg) */ {
 public:
  inline RankScoreMsg() : RankScoreMsg(nullptr) {};
  virtual ~RankScoreMsg();

  RankScoreMsg(const RankScoreMsg& from);
  RankScoreMsg(RankScoreMsg&& from) noexcept
    : RankScoreMsg() {
    *this = ::std::move(from);
  }

  inline RankScoreMsg& operator=(const RankScoreMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankScoreMsg& operator=(RankScoreMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankScoreMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankScoreMsg* internal_default_instance() {
    return reinterpret_cast<const RankScoreMsg*>(
               &_RankScoreMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RankScoreMsg& a, RankScoreMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RankScoreMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankScoreMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankScoreMsg* New() const final {
    return CreateMaybeMessage<RankScoreMsg>(nullptr);
  }

  RankScoreMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankScoreMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankScoreMsg& from);
  void MergeFrom(const RankScoreMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankScoreMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankScoreMsg";
  }
  protected:
  explicit RankScoreMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RankScoreMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class RankListMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankListMsg) */ {
 public:
  inline RankListMsg() : RankListMsg(nullptr) {};
  virtual ~RankListMsg();

  RankListMsg(const RankListMsg& from);
  RankListMsg(RankListMsg&& from) noexcept
    : RankListMsg() {
    *this = ::std::move(from);
  }

  inline RankListMsg& operator=(const RankListMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankListMsg& operator=(RankListMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankListMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListMsg* internal_default_instance() {
    return reinterpret_cast<const RankListMsg*>(
               &_RankListMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RankListMsg& a, RankListMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RankListMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankListMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankListMsg* New() const final {
    return CreateMaybeMessage<RankListMsg>(nullptr);
  }

  RankListMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankListMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankListMsg& from);
  void MergeFrom(const RankListMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankListMsg";
  }
  protected:
  explicit RankListMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankListFieldNumber = 1,
  };
  // repeated .RankScoreMsg rankList = 1;
  int ranklist_size() const;
  private:
  int _internal_ranklist_size() const;
  public:
  void clear_ranklist();
  ::RankScoreMsg* mutable_ranklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankScoreMsg >*
      mutable_ranklist();
  private:
  const ::RankScoreMsg& _internal_ranklist(int index) const;
  ::RankScoreMsg* _internal_add_ranklist();
  public:
  const ::RankScoreMsg& ranklist(int index) const;
  ::RankScoreMsg* add_ranklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankScoreMsg >&
      ranklist() const;

  // @@protoc_insertion_point(class_scope:RankListMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankScoreMsg > ranklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class FullMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FullMessage) */ {
 public:
  inline FullMessage() : FullMessage(nullptr) {};
  virtual ~FullMessage();

  FullMessage(const FullMessage& from);
  FullMessage(FullMessage&& from) noexcept
    : FullMessage() {
    *this = ::std::move(from);
  }

  inline FullMessage& operator=(const FullMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullMessage& operator=(FullMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullMessage& default_instance();

  enum PayloadCase {
    kLoginReq = 2,
    kLoginRsp = 3,
    kPlayerLogin = 4,
    kLoadOtherPlayers = 5,
    kPlayerState = 6,
    kGunInfo = 7,
    kGunFire = 8,
    kReloadBullet = 9,
    kBulletHit = 10,
    kAnimatorParam = 11,
    kLogout = 12,
    kRankScore = 13,
    kRankList = 14,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullMessage* internal_default_instance() {
    return reinterpret_cast<const FullMessage*>(
               &_FullMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FullMessage& a, FullMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FullMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullMessage* New() const final {
    return CreateMaybeMessage<FullMessage>(nullptr);
  }

  FullMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullMessage& from);
  void MergeFrom(const FullMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FullMessage";
  }
  protected:
  explicit FullMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLoginReqFieldNumber = 2,
    kLoginRspFieldNumber = 3,
    kPlayerLoginFieldNumber = 4,
    kLoadOtherPlayersFieldNumber = 5,
    kPlayerStateFieldNumber = 6,
    kGunInfoFieldNumber = 7,
    kGunFireFieldNumber = 8,
    kReloadBulletFieldNumber = 9,
    kBulletHitFieldNumber = 10,
    kAnimatorParamFieldNumber = 11,
    kLogoutFieldNumber = 12,
    kRankScoreFieldNumber = 13,
    kRankListFieldNumber = 14,
  };
  // .MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::MessageHeader& header() const;
  ::MessageHeader* release_header();
  ::MessageHeader* mutable_header();
  void set_allocated_header(::MessageHeader* header);
  private:
  const ::MessageHeader& _internal_header() const;
  ::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::MessageHeader* header);
  ::MessageHeader* unsafe_arena_release_header();

  // .LoginInRequest login_req = 2;
  bool has_login_req() const;
  private:
  bool _internal_has_login_req() const;
  public:
  void clear_login_req();
  const ::LoginInRequest& login_req() const;
  ::LoginInRequest* release_login_req();
  ::LoginInRequest* mutable_login_req();
  void set_allocated_login_req(::LoginInRequest* login_req);
  private:
  const ::LoginInRequest& _internal_login_req() const;
  ::LoginInRequest* _internal_mutable_login_req();
  public:
  void unsafe_arena_set_allocated_login_req(
      ::LoginInRequest* login_req);
  ::LoginInRequest* unsafe_arena_release_login_req();

  // .LoginInResponse login_rsp = 3;
  bool has_login_rsp() const;
  private:
  bool _internal_has_login_rsp() const;
  public:
  void clear_login_rsp();
  const ::LoginInResponse& login_rsp() const;
  ::LoginInResponse* release_login_rsp();
  ::LoginInResponse* mutable_login_rsp();
  void set_allocated_login_rsp(::LoginInResponse* login_rsp);
  private:
  const ::LoginInResponse& _internal_login_rsp() const;
  ::LoginInResponse* _internal_mutable_login_rsp();
  public:
  void unsafe_arena_set_allocated_login_rsp(
      ::LoginInResponse* login_rsp);
  ::LoginInResponse* unsafe_arena_release_login_rsp();

  // .PlayerLoginMsg player_login = 4;
  bool has_player_login() const;
  private:
  bool _internal_has_player_login() const;
  public:
  void clear_player_login();
  const ::PlayerLoginMsg& player_login() const;
  ::PlayerLoginMsg* release_player_login();
  ::PlayerLoginMsg* mutable_player_login();
  void set_allocated_player_login(::PlayerLoginMsg* player_login);
  private:
  const ::PlayerLoginMsg& _internal_player_login() const;
  ::PlayerLoginMsg* _internal_mutable_player_login();
  public:
  void unsafe_arena_set_allocated_player_login(
      ::PlayerLoginMsg* player_login);
  ::PlayerLoginMsg* unsafe_arena_release_player_login();

  // .LoadOtherPlayersMsg load_other_players = 5;
  bool has_load_other_players() const;
  private:
  bool _internal_has_load_other_players() const;
  public:
  void clear_load_other_players();
  const ::LoadOtherPlayersMsg& load_other_players() const;
  ::LoadOtherPlayersMsg* release_load_other_players();
  ::LoadOtherPlayersMsg* mutable_load_other_players();
  void set_allocated_load_other_players(::LoadOtherPlayersMsg* load_other_players);
  private:
  const ::LoadOtherPlayersMsg& _internal_load_other_players() const;
  ::LoadOtherPlayersMsg* _internal_mutable_load_other_players();
  public:
  void unsafe_arena_set_allocated_load_other_players(
      ::LoadOtherPlayersMsg* load_other_players);
  ::LoadOtherPlayersMsg* unsafe_arena_release_load_other_players();

  // .PlayerStateMsg player_state = 6;
  bool has_player_state() const;
  private:
  bool _internal_has_player_state() const;
  public:
  void clear_player_state();
  const ::PlayerStateMsg& player_state() const;
  ::PlayerStateMsg* release_player_state();
  ::PlayerStateMsg* mutable_player_state();
  void set_allocated_player_state(::PlayerStateMsg* player_state);
  private:
  const ::PlayerStateMsg& _internal_player_state() const;
  ::PlayerStateMsg* _internal_mutable_player_state();
  public:
  void unsafe_arena_set_allocated_player_state(
      ::PlayerStateMsg* player_state);
  ::PlayerStateMsg* unsafe_arena_release_player_state();

  // .GunInfoMsg gun_info = 7;
  bool has_gun_info() const;
  private:
  bool _internal_has_gun_info() const;
  public:
  void clear_gun_info();
  const ::GunInfoMsg& gun_info() const;
  ::GunInfoMsg* release_gun_info();
  ::GunInfoMsg* mutable_gun_info();
  void set_allocated_gun_info(::GunInfoMsg* gun_info);
  private:
  const ::GunInfoMsg& _internal_gun_info() const;
  ::GunInfoMsg* _internal_mutable_gun_info();
  public:
  void unsafe_arena_set_allocated_gun_info(
      ::GunInfoMsg* gun_info);
  ::GunInfoMsg* unsafe_arena_release_gun_info();

  // .GunFireMsg gun_fire = 8;
  bool has_gun_fire() const;
  private:
  bool _internal_has_gun_fire() const;
  public:
  void clear_gun_fire();
  const ::GunFireMsg& gun_fire() const;
  ::GunFireMsg* release_gun_fire();
  ::GunFireMsg* mutable_gun_fire();
  void set_allocated_gun_fire(::GunFireMsg* gun_fire);
  private:
  const ::GunFireMsg& _internal_gun_fire() const;
  ::GunFireMsg* _internal_mutable_gun_fire();
  public:
  void unsafe_arena_set_allocated_gun_fire(
      ::GunFireMsg* gun_fire);
  ::GunFireMsg* unsafe_arena_release_gun_fire();

  // .ReloadBulletMsg reload_bullet = 9;
  bool has_reload_bullet() const;
  private:
  bool _internal_has_reload_bullet() const;
  public:
  void clear_reload_bullet();
  const ::ReloadBulletMsg& reload_bullet() const;
  ::ReloadBulletMsg* release_reload_bullet();
  ::ReloadBulletMsg* mutable_reload_bullet();
  void set_allocated_reload_bullet(::ReloadBulletMsg* reload_bullet);
  private:
  const ::ReloadBulletMsg& _internal_reload_bullet() const;
  ::ReloadBulletMsg* _internal_mutable_reload_bullet();
  public:
  void unsafe_arena_set_allocated_reload_bullet(
      ::ReloadBulletMsg* reload_bullet);
  ::ReloadBulletMsg* unsafe_arena_release_reload_bullet();

  // .BulletHitMsg bullet_hit = 10;
  bool has_bullet_hit() const;
  private:
  bool _internal_has_bullet_hit() const;
  public:
  void clear_bullet_hit();
  const ::BulletHitMsg& bullet_hit() const;
  ::BulletHitMsg* release_bullet_hit();
  ::BulletHitMsg* mutable_bullet_hit();
  void set_allocated_bullet_hit(::BulletHitMsg* bullet_hit);
  private:
  const ::BulletHitMsg& _internal_bullet_hit() const;
  ::BulletHitMsg* _internal_mutable_bullet_hit();
  public:
  void unsafe_arena_set_allocated_bullet_hit(
      ::BulletHitMsg* bullet_hit);
  ::BulletHitMsg* unsafe_arena_release_bullet_hit();

  // .AnimatorParamMsg animator_param = 11;
  bool has_animator_param() const;
  private:
  bool _internal_has_animator_param() const;
  public:
  void clear_animator_param();
  const ::AnimatorParamMsg& animator_param() const;
  ::AnimatorParamMsg* release_animator_param();
  ::AnimatorParamMsg* mutable_animator_param();
  void set_allocated_animator_param(::AnimatorParamMsg* animator_param);
  private:
  const ::AnimatorParamMsg& _internal_animator_param() const;
  ::AnimatorParamMsg* _internal_mutable_animator_param();
  public:
  void unsafe_arena_set_allocated_animator_param(
      ::AnimatorParamMsg* animator_param);
  ::AnimatorParamMsg* unsafe_arena_release_animator_param();

  // .LogoutMsg logout = 12;
  bool has_logout() const;
  private:
  bool _internal_has_logout() const;
  public:
  void clear_logout();
  const ::LogoutMsg& logout() const;
  ::LogoutMsg* release_logout();
  ::LogoutMsg* mutable_logout();
  void set_allocated_logout(::LogoutMsg* logout);
  private:
  const ::LogoutMsg& _internal_logout() const;
  ::LogoutMsg* _internal_mutable_logout();
  public:
  void unsafe_arena_set_allocated_logout(
      ::LogoutMsg* logout);
  ::LogoutMsg* unsafe_arena_release_logout();

  // .RankScoreMsg rank_score = 13;
  bool has_rank_score() const;
  private:
  bool _internal_has_rank_score() const;
  public:
  void clear_rank_score();
  const ::RankScoreMsg& rank_score() const;
  ::RankScoreMsg* release_rank_score();
  ::RankScoreMsg* mutable_rank_score();
  void set_allocated_rank_score(::RankScoreMsg* rank_score);
  private:
  const ::RankScoreMsg& _internal_rank_score() const;
  ::RankScoreMsg* _internal_mutable_rank_score();
  public:
  void unsafe_arena_set_allocated_rank_score(
      ::RankScoreMsg* rank_score);
  ::RankScoreMsg* unsafe_arena_release_rank_score();

  // .RankListMsg rank_list = 14;
  bool has_rank_list() const;
  private:
  bool _internal_has_rank_list() const;
  public:
  void clear_rank_list();
  const ::RankListMsg& rank_list() const;
  ::RankListMsg* release_rank_list();
  ::RankListMsg* mutable_rank_list();
  void set_allocated_rank_list(::RankListMsg* rank_list);
  private:
  const ::RankListMsg& _internal_rank_list() const;
  ::RankListMsg* _internal_mutable_rank_list();
  public:
  void unsafe_arena_set_allocated_rank_list(
      ::RankListMsg* rank_list);
  ::RankListMsg* unsafe_arena_release_rank_list();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:FullMessage)
 private:
  class _Internal;
  void set_has_login_req();
  void set_has_login_rsp();
  void set_has_player_login();
  void set_has_load_other_players();
  void set_has_player_state();
  void set_has_gun_info();
  void set_has_gun_fire();
  void set_has_reload_bullet();
  void set_has_bullet_hit();
  void set_has_animator_param();
  void set_has_logout();
  void set_has_rank_score();
  void set_has_rank_list();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MessageHeader* header_;
  union PayloadUnion {
    PayloadUnion() {}
    ::LoginInRequest* login_req_;
    ::LoginInResponse* login_rsp_;
    ::PlayerLoginMsg* player_login_;
    ::LoadOtherPlayersMsg* load_other_players_;
    ::PlayerStateMsg* player_state_;
    ::GunInfoMsg* gun_info_;
    ::GunFireMsg* gun_fire_;
    ::ReloadBulletMsg* reload_bullet_;
    ::BulletHitMsg* bullet_hit_;
    ::AnimatorParamMsg* animator_param_;
    ::LogoutMsg* logout_;
    ::RankScoreMsg* rank_score_;
    ::RankListMsg* rank_list_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// .MessageType Type = 1;
inline void MessageHeader::clear_type() {
  type_ = 0;
}
inline ::MessageType MessageHeader::_internal_type() const {
  return static_cast< ::MessageType >(type_);
}
inline ::MessageType MessageHeader::type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.Type)
  return _internal_type();
}
inline void MessageHeader::_internal_set_type(::MessageType value) {
  
  type_ = value;
}
inline void MessageHeader::set_type(::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MessageHeader.Type)
}

// -------------------------------------------------------------------

// LoginInRequest

// string username = 1;
inline void LoginInRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginInRequest::username() const {
  // @@protoc_insertion_point(field_get:LoginInRequest.username)
  return _internal_username();
}
inline void LoginInRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:LoginInRequest.username)
}
inline std::string* LoginInRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:LoginInRequest.username)
  return _internal_mutable_username();
}
inline const std::string& LoginInRequest::_internal_username() const {
  return username_.Get();
}
inline void LoginInRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginInRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginInRequest.username)
}
inline void LoginInRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginInRequest.username)
}
inline void LoginInRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginInRequest.username)
}
inline std::string* LoginInRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginInRequest::release_username() {
  // @@protoc_insertion_point(field_release:LoginInRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginInRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginInRequest.username)
}
inline std::string* LoginInRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginInRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginInRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginInRequest.username)
}

// string password = 2;
inline void LoginInRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginInRequest::password() const {
  // @@protoc_insertion_point(field_get:LoginInRequest.password)
  return _internal_password();
}
inline void LoginInRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:LoginInRequest.password)
}
inline std::string* LoginInRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:LoginInRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LoginInRequest::_internal_password() const {
  return password_.Get();
}
inline void LoginInRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginInRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginInRequest.password)
}
inline void LoginInRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginInRequest.password)
}
inline void LoginInRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginInRequest.password)
}
inline std::string* LoginInRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginInRequest::release_password() {
  // @@protoc_insertion_point(field_release:LoginInRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginInRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginInRequest.password)
}
inline std::string* LoginInRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginInRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginInRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginInRequest.password)
}

// -------------------------------------------------------------------

// ClientMsg

// int32 client_id = 1;
inline void ClientMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsg::client_id() const {
  // @@protoc_insertion_point(field_get:ClientMsg.client_id)
  return _internal_client_id();
}
inline void ClientMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void ClientMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:ClientMsg.client_id)
}

// string username = 2;
inline void ClientMsg::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientMsg::username() const {
  // @@protoc_insertion_point(field_get:ClientMsg.username)
  return _internal_username();
}
inline void ClientMsg::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ClientMsg.username)
}
inline std::string* ClientMsg::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ClientMsg.username)
  return _internal_mutable_username();
}
inline const std::string& ClientMsg::_internal_username() const {
  return username_.Get();
}
inline void ClientMsg::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientMsg::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientMsg.username)
}
inline void ClientMsg::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientMsg.username)
}
inline void ClientMsg::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientMsg.username)
}
inline std::string* ClientMsg::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientMsg::release_username() {
  // @@protoc_insertion_point(field_release:ClientMsg.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMsg::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientMsg.username)
}
inline std::string* ClientMsg::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientMsg.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientMsg::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientMsg.username)
}

// int32 state = 3;
inline void ClientMsg::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsg::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsg::state() const {
  // @@protoc_insertion_point(field_get:ClientMsg.state)
  return _internal_state();
}
inline void ClientMsg::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void ClientMsg::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ClientMsg.state)
}

// .PlayerPositionMsg position = 4;
inline bool ClientMsg::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool ClientMsg::has_position() const {
  return _internal_has_position();
}
inline void ClientMsg::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::PlayerPositionMsg& ClientMsg::_internal_position() const {
  const ::PlayerPositionMsg* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlayerPositionMsg*>(
      &::_PlayerPositionMsg_default_instance_);
}
inline const ::PlayerPositionMsg& ClientMsg::position() const {
  // @@protoc_insertion_point(field_get:ClientMsg.position)
  return _internal_position();
}
inline void ClientMsg::unsafe_arena_set_allocated_position(
    ::PlayerPositionMsg* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientMsg.position)
}
inline ::PlayerPositionMsg* ClientMsg::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerPositionMsg* ClientMsg::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ClientMsg.position)
  
  ::PlayerPositionMsg* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::PlayerPositionMsg* ClientMsg::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerPositionMsg>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::PlayerPositionMsg* ClientMsg::mutable_position() {
  // @@protoc_insertion_point(field_mutable:ClientMsg.position)
  return _internal_mutable_position();
}
inline void ClientMsg::set_allocated_position(::PlayerPositionMsg* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ClientMsg.position)
}

// int32 health = 5;
inline void ClientMsg::clear_health() {
  health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsg::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsg::health() const {
  // @@protoc_insertion_point(field_get:ClientMsg.health)
  return _internal_health();
}
inline void ClientMsg::_internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  health_ = value;
}
inline void ClientMsg::set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:ClientMsg.health)
}

// string gun_name = 6;
inline void ClientMsg::clear_gun_name() {
  gun_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientMsg::gun_name() const {
  // @@protoc_insertion_point(field_get:ClientMsg.gun_name)
  return _internal_gun_name();
}
inline void ClientMsg::set_gun_name(const std::string& value) {
  _internal_set_gun_name(value);
  // @@protoc_insertion_point(field_set:ClientMsg.gun_name)
}
inline std::string* ClientMsg::mutable_gun_name() {
  // @@protoc_insertion_point(field_mutable:ClientMsg.gun_name)
  return _internal_mutable_gun_name();
}
inline const std::string& ClientMsg::_internal_gun_name() const {
  return gun_name_.Get();
}
inline void ClientMsg::_internal_set_gun_name(const std::string& value) {
  
  gun_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientMsg::set_gun_name(std::string&& value) {
  
  gun_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientMsg.gun_name)
}
inline void ClientMsg::set_gun_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gun_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientMsg.gun_name)
}
inline void ClientMsg::set_gun_name(const char* value,
    size_t size) {
  
  gun_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientMsg.gun_name)
}
inline std::string* ClientMsg::_internal_mutable_gun_name() {
  
  return gun_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientMsg::release_gun_name() {
  // @@protoc_insertion_point(field_release:ClientMsg.gun_name)
  return gun_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMsg::set_allocated_gun_name(std::string* gun_name) {
  if (gun_name != nullptr) {
    
  } else {
    
  }
  gun_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gun_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientMsg.gun_name)
}
inline std::string* ClientMsg::unsafe_arena_release_gun_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientMsg.gun_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gun_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientMsg::unsafe_arena_set_allocated_gun_name(
    std::string* gun_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gun_name != nullptr) {
    
  } else {
    
  }
  gun_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gun_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientMsg.gun_name)
}

// -------------------------------------------------------------------

// LoginInResponse

// .ClientMsg client = 1;
inline bool LoginInResponse::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool LoginInResponse::has_client() const {
  return _internal_has_client();
}
inline void LoginInResponse::clear_client() {
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::ClientMsg& LoginInResponse::_internal_client() const {
  const ::ClientMsg* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMsg*>(
      &::_ClientMsg_default_instance_);
}
inline const ::ClientMsg& LoginInResponse::client() const {
  // @@protoc_insertion_point(field_get:LoginInResponse.client)
  return _internal_client();
}
inline void LoginInResponse::unsafe_arena_set_allocated_client(
    ::ClientMsg* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginInResponse.client)
}
inline ::ClientMsg* LoginInResponse::release_client() {
  auto temp = unsafe_arena_release_client();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientMsg* LoginInResponse::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:LoginInResponse.client)
  
  ::ClientMsg* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::ClientMsg* LoginInResponse::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMsg>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::ClientMsg* LoginInResponse::mutable_client() {
  // @@protoc_insertion_point(field_mutable:LoginInResponse.client)
  return _internal_mutable_client();
}
inline void LoginInResponse::set_allocated_client(::ClientMsg* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:LoginInResponse.client)
}

// int32 error_no = 2;
inline void LoginInResponse::clear_error_no() {
  error_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginInResponse::_internal_error_no() const {
  return error_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginInResponse::error_no() const {
  // @@protoc_insertion_point(field_get:LoginInResponse.error_no)
  return _internal_error_no();
}
inline void LoginInResponse::_internal_set_error_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_no_ = value;
}
inline void LoginInResponse::set_error_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_no(value);
  // @@protoc_insertion_point(field_set:LoginInResponse.error_no)
}

// -------------------------------------------------------------------

// LoadOtherPlayersMsg

// repeated .ClientMsg otherClients = 1;
inline int LoadOtherPlayersMsg::_internal_otherclients_size() const {
  return otherclients_.size();
}
inline int LoadOtherPlayersMsg::otherclients_size() const {
  return _internal_otherclients_size();
}
inline void LoadOtherPlayersMsg::clear_otherclients() {
  otherclients_.Clear();
}
inline ::ClientMsg* LoadOtherPlayersMsg::mutable_otherclients(int index) {
  // @@protoc_insertion_point(field_mutable:LoadOtherPlayersMsg.otherClients)
  return otherclients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientMsg >*
LoadOtherPlayersMsg::mutable_otherclients() {
  // @@protoc_insertion_point(field_mutable_list:LoadOtherPlayersMsg.otherClients)
  return &otherclients_;
}
inline const ::ClientMsg& LoadOtherPlayersMsg::_internal_otherclients(int index) const {
  return otherclients_.Get(index);
}
inline const ::ClientMsg& LoadOtherPlayersMsg::otherclients(int index) const {
  // @@protoc_insertion_point(field_get:LoadOtherPlayersMsg.otherClients)
  return _internal_otherclients(index);
}
inline ::ClientMsg* LoadOtherPlayersMsg::_internal_add_otherclients() {
  return otherclients_.Add();
}
inline ::ClientMsg* LoadOtherPlayersMsg::add_otherclients() {
  // @@protoc_insertion_point(field_add:LoadOtherPlayersMsg.otherClients)
  return _internal_add_otherclients();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientMsg >&
LoadOtherPlayersMsg::otherclients() const {
  // @@protoc_insertion_point(field_list:LoadOtherPlayersMsg.otherClients)
  return otherclients_;
}

// -------------------------------------------------------------------

// PlayerLoginMsg

// .ClientMsg client = 1;
inline bool PlayerLoginMsg::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool PlayerLoginMsg::has_client() const {
  return _internal_has_client();
}
inline void PlayerLoginMsg::clear_client() {
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::ClientMsg& PlayerLoginMsg::_internal_client() const {
  const ::ClientMsg* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMsg*>(
      &::_ClientMsg_default_instance_);
}
inline const ::ClientMsg& PlayerLoginMsg::client() const {
  // @@protoc_insertion_point(field_get:PlayerLoginMsg.client)
  return _internal_client();
}
inline void PlayerLoginMsg::unsafe_arena_set_allocated_client(
    ::ClientMsg* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerLoginMsg.client)
}
inline ::ClientMsg* PlayerLoginMsg::release_client() {
  auto temp = unsafe_arena_release_client();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientMsg* PlayerLoginMsg::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:PlayerLoginMsg.client)
  
  ::ClientMsg* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::ClientMsg* PlayerLoginMsg::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMsg>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::ClientMsg* PlayerLoginMsg::mutable_client() {
  // @@protoc_insertion_point(field_mutable:PlayerLoginMsg.client)
  return _internal_mutable_client();
}
inline void PlayerLoginMsg::set_allocated_client(::ClientMsg* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:PlayerLoginMsg.client)
}

// -------------------------------------------------------------------

// PlayerPositionMsg

// float x = 1;
inline void PlayerPositionMsg::clear_x() {
  x_ = 0;
}
inline float PlayerPositionMsg::_internal_x() const {
  return x_;
}
inline float PlayerPositionMsg::x() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.x)
  return _internal_x();
}
inline void PlayerPositionMsg::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerPositionMsg::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.x)
}

// float y = 2;
inline void PlayerPositionMsg::clear_y() {
  y_ = 0;
}
inline float PlayerPositionMsg::_internal_y() const {
  return y_;
}
inline float PlayerPositionMsg::y() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.y)
  return _internal_y();
}
inline void PlayerPositionMsg::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerPositionMsg::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.y)
}

// float z = 3;
inline void PlayerPositionMsg::clear_z() {
  z_ = 0;
}
inline float PlayerPositionMsg::_internal_z() const {
  return z_;
}
inline float PlayerPositionMsg::z() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.z)
  return _internal_z();
}
inline void PlayerPositionMsg::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PlayerPositionMsg::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.z)
}

// float rotation_x = 4;
inline void PlayerPositionMsg::clear_rotation_x() {
  rotation_x_ = 0;
}
inline float PlayerPositionMsg::_internal_rotation_x() const {
  return rotation_x_;
}
inline float PlayerPositionMsg::rotation_x() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.rotation_x)
  return _internal_rotation_x();
}
inline void PlayerPositionMsg::_internal_set_rotation_x(float value) {
  
  rotation_x_ = value;
}
inline void PlayerPositionMsg::set_rotation_x(float value) {
  _internal_set_rotation_x(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.rotation_x)
}

// float rotation_y = 5;
inline void PlayerPositionMsg::clear_rotation_y() {
  rotation_y_ = 0;
}
inline float PlayerPositionMsg::_internal_rotation_y() const {
  return rotation_y_;
}
inline float PlayerPositionMsg::rotation_y() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.rotation_y)
  return _internal_rotation_y();
}
inline void PlayerPositionMsg::_internal_set_rotation_y(float value) {
  
  rotation_y_ = value;
}
inline void PlayerPositionMsg::set_rotation_y(float value) {
  _internal_set_rotation_y(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.rotation_y)
}

// float rotation_z = 6;
inline void PlayerPositionMsg::clear_rotation_z() {
  rotation_z_ = 0;
}
inline float PlayerPositionMsg::_internal_rotation_z() const {
  return rotation_z_;
}
inline float PlayerPositionMsg::rotation_z() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.rotation_z)
  return _internal_rotation_z();
}
inline void PlayerPositionMsg::_internal_set_rotation_z(float value) {
  
  rotation_z_ = value;
}
inline void PlayerPositionMsg::set_rotation_z(float value) {
  _internal_set_rotation_z(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.rotation_z)
}

// float gun_rotation_x = 7;
inline void PlayerPositionMsg::clear_gun_rotation_x() {
  gun_rotation_x_ = 0;
}
inline float PlayerPositionMsg::_internal_gun_rotation_x() const {
  return gun_rotation_x_;
}
inline float PlayerPositionMsg::gun_rotation_x() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.gun_rotation_x)
  return _internal_gun_rotation_x();
}
inline void PlayerPositionMsg::_internal_set_gun_rotation_x(float value) {
  
  gun_rotation_x_ = value;
}
inline void PlayerPositionMsg::set_gun_rotation_x(float value) {
  _internal_set_gun_rotation_x(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.gun_rotation_x)
}

// float gun_rotation_y = 8;
inline void PlayerPositionMsg::clear_gun_rotation_y() {
  gun_rotation_y_ = 0;
}
inline float PlayerPositionMsg::_internal_gun_rotation_y() const {
  return gun_rotation_y_;
}
inline float PlayerPositionMsg::gun_rotation_y() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.gun_rotation_y)
  return _internal_gun_rotation_y();
}
inline void PlayerPositionMsg::_internal_set_gun_rotation_y(float value) {
  
  gun_rotation_y_ = value;
}
inline void PlayerPositionMsg::set_gun_rotation_y(float value) {
  _internal_set_gun_rotation_y(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.gun_rotation_y)
}

// float gun_rotation_z = 9;
inline void PlayerPositionMsg::clear_gun_rotation_z() {
  gun_rotation_z_ = 0;
}
inline float PlayerPositionMsg::_internal_gun_rotation_z() const {
  return gun_rotation_z_;
}
inline float PlayerPositionMsg::gun_rotation_z() const {
  // @@protoc_insertion_point(field_get:PlayerPositionMsg.gun_rotation_z)
  return _internal_gun_rotation_z();
}
inline void PlayerPositionMsg::_internal_set_gun_rotation_z(float value) {
  
  gun_rotation_z_ = value;
}
inline void PlayerPositionMsg::set_gun_rotation_z(float value) {
  _internal_set_gun_rotation_z(value);
  // @@protoc_insertion_point(field_set:PlayerPositionMsg.gun_rotation_z)
}

// -------------------------------------------------------------------

// PlayerStateMsg

// .ClientMsg client = 1;
inline bool PlayerStateMsg::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool PlayerStateMsg::has_client() const {
  return _internal_has_client();
}
inline void PlayerStateMsg::clear_client() {
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::ClientMsg& PlayerStateMsg::_internal_client() const {
  const ::ClientMsg* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMsg*>(
      &::_ClientMsg_default_instance_);
}
inline const ::ClientMsg& PlayerStateMsg::client() const {
  // @@protoc_insertion_point(field_get:PlayerStateMsg.client)
  return _internal_client();
}
inline void PlayerStateMsg::unsafe_arena_set_allocated_client(
    ::ClientMsg* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerStateMsg.client)
}
inline ::ClientMsg* PlayerStateMsg::release_client() {
  auto temp = unsafe_arena_release_client();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientMsg* PlayerStateMsg::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:PlayerStateMsg.client)
  
  ::ClientMsg* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::ClientMsg* PlayerStateMsg::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMsg>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::ClientMsg* PlayerStateMsg::mutable_client() {
  // @@protoc_insertion_point(field_mutable:PlayerStateMsg.client)
  return _internal_mutable_client();
}
inline void PlayerStateMsg::set_allocated_client(::ClientMsg* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:PlayerStateMsg.client)
}

// -------------------------------------------------------------------

// GunInfoMsg

// int32 client_id = 1;
inline void GunInfoMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfoMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfoMsg::client_id() const {
  // @@protoc_insertion_point(field_get:GunInfoMsg.client_id)
  return _internal_client_id();
}
inline void GunInfoMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void GunInfoMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:GunInfoMsg.client_id)
}

// string gun_name = 2;
inline void GunInfoMsg::clear_gun_name() {
  gun_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GunInfoMsg::gun_name() const {
  // @@protoc_insertion_point(field_get:GunInfoMsg.gun_name)
  return _internal_gun_name();
}
inline void GunInfoMsg::set_gun_name(const std::string& value) {
  _internal_set_gun_name(value);
  // @@protoc_insertion_point(field_set:GunInfoMsg.gun_name)
}
inline std::string* GunInfoMsg::mutable_gun_name() {
  // @@protoc_insertion_point(field_mutable:GunInfoMsg.gun_name)
  return _internal_mutable_gun_name();
}
inline const std::string& GunInfoMsg::_internal_gun_name() const {
  return gun_name_.Get();
}
inline void GunInfoMsg::_internal_set_gun_name(const std::string& value) {
  
  gun_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GunInfoMsg::set_gun_name(std::string&& value) {
  
  gun_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GunInfoMsg.gun_name)
}
inline void GunInfoMsg::set_gun_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gun_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GunInfoMsg.gun_name)
}
inline void GunInfoMsg::set_gun_name(const char* value,
    size_t size) {
  
  gun_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GunInfoMsg.gun_name)
}
inline std::string* GunInfoMsg::_internal_mutable_gun_name() {
  
  return gun_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GunInfoMsg::release_gun_name() {
  // @@protoc_insertion_point(field_release:GunInfoMsg.gun_name)
  return gun_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GunInfoMsg::set_allocated_gun_name(std::string* gun_name) {
  if (gun_name != nullptr) {
    
  } else {
    
  }
  gun_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gun_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GunInfoMsg.gun_name)
}
inline std::string* GunInfoMsg::unsafe_arena_release_gun_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GunInfoMsg.gun_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gun_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GunInfoMsg::unsafe_arena_set_allocated_gun_name(
    std::string* gun_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gun_name != nullptr) {
    
  } else {
    
  }
  gun_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gun_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GunInfoMsg.gun_name)
}

// int32 throw = 3;
inline void GunInfoMsg::clear_throw_() {
  throw__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfoMsg::_internal_throw_() const {
  return throw__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunInfoMsg::throw_() const {
  // @@protoc_insertion_point(field_get:GunInfoMsg.throw)
  return _internal_throw_();
}
inline void GunInfoMsg::_internal_set_throw_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  throw__ = value;
}
inline void GunInfoMsg::set_throw_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_throw_(value);
  // @@protoc_insertion_point(field_set:GunInfoMsg.throw)
}

// -------------------------------------------------------------------

// GunFireMsg

// int32 client_id = 1;
inline void GunFireMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunFireMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GunFireMsg::client_id() const {
  // @@protoc_insertion_point(field_get:GunFireMsg.client_id)
  return _internal_client_id();
}
inline void GunFireMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void GunFireMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:GunFireMsg.client_id)
}

// float shootDirection_x = 2;
inline void GunFireMsg::clear_shootdirection_x() {
  shootdirection_x_ = 0;
}
inline float GunFireMsg::_internal_shootdirection_x() const {
  return shootdirection_x_;
}
inline float GunFireMsg::shootdirection_x() const {
  // @@protoc_insertion_point(field_get:GunFireMsg.shootDirection_x)
  return _internal_shootdirection_x();
}
inline void GunFireMsg::_internal_set_shootdirection_x(float value) {
  
  shootdirection_x_ = value;
}
inline void GunFireMsg::set_shootdirection_x(float value) {
  _internal_set_shootdirection_x(value);
  // @@protoc_insertion_point(field_set:GunFireMsg.shootDirection_x)
}

// float shootDirection_y = 3;
inline void GunFireMsg::clear_shootdirection_y() {
  shootdirection_y_ = 0;
}
inline float GunFireMsg::_internal_shootdirection_y() const {
  return shootdirection_y_;
}
inline float GunFireMsg::shootdirection_y() const {
  // @@protoc_insertion_point(field_get:GunFireMsg.shootDirection_y)
  return _internal_shootdirection_y();
}
inline void GunFireMsg::_internal_set_shootdirection_y(float value) {
  
  shootdirection_y_ = value;
}
inline void GunFireMsg::set_shootdirection_y(float value) {
  _internal_set_shootdirection_y(value);
  // @@protoc_insertion_point(field_set:GunFireMsg.shootDirection_y)
}

// float shootDirection_z = 4;
inline void GunFireMsg::clear_shootdirection_z() {
  shootdirection_z_ = 0;
}
inline float GunFireMsg::_internal_shootdirection_z() const {
  return shootdirection_z_;
}
inline float GunFireMsg::shootdirection_z() const {
  // @@protoc_insertion_point(field_get:GunFireMsg.shootDirection_z)
  return _internal_shootdirection_z();
}
inline void GunFireMsg::_internal_set_shootdirection_z(float value) {
  
  shootdirection_z_ = value;
}
inline void GunFireMsg::set_shootdirection_z(float value) {
  _internal_set_shootdirection_z(value);
  // @@protoc_insertion_point(field_set:GunFireMsg.shootDirection_z)
}

// -------------------------------------------------------------------

// ReloadBulletMsg

// int32 client_id = 1;
inline void ReloadBulletMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReloadBulletMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReloadBulletMsg::client_id() const {
  // @@protoc_insertion_point(field_get:ReloadBulletMsg.client_id)
  return _internal_client_id();
}
inline void ReloadBulletMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void ReloadBulletMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:ReloadBulletMsg.client_id)
}

// int32 bulletCount = 2;
inline void ReloadBulletMsg::clear_bulletcount() {
  bulletcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReloadBulletMsg::_internal_bulletcount() const {
  return bulletcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReloadBulletMsg::bulletcount() const {
  // @@protoc_insertion_point(field_get:ReloadBulletMsg.bulletCount)
  return _internal_bulletcount();
}
inline void ReloadBulletMsg::_internal_set_bulletcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bulletcount_ = value;
}
inline void ReloadBulletMsg::set_bulletcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bulletcount(value);
  // @@protoc_insertion_point(field_set:ReloadBulletMsg.bulletCount)
}

// -------------------------------------------------------------------

// BulletHitMsg

// int32 client_id = 1;
inline void BulletHitMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulletHitMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulletHitMsg::client_id() const {
  // @@protoc_insertion_point(field_get:BulletHitMsg.client_id)
  return _internal_client_id();
}
inline void BulletHitMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void BulletHitMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:BulletHitMsg.client_id)
}

// int32 health = 2;
inline void BulletHitMsg::clear_health() {
  health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulletHitMsg::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulletHitMsg::health() const {
  // @@protoc_insertion_point(field_get:BulletHitMsg.health)
  return _internal_health();
}
inline void BulletHitMsg::_internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  health_ = value;
}
inline void BulletHitMsg::set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:BulletHitMsg.health)
}

// -------------------------------------------------------------------

// AnimatorParamMsg

// int32 client_id = 1;
inline void AnimatorParamMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimatorParamMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimatorParamMsg::client_id() const {
  // @@protoc_insertion_point(field_get:AnimatorParamMsg.client_id)
  return _internal_client_id();
}
inline void AnimatorParamMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void AnimatorParamMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:AnimatorParamMsg.client_id)
}

// string paramName = 2;
inline void AnimatorParamMsg::clear_paramname() {
  paramname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnimatorParamMsg::paramname() const {
  // @@protoc_insertion_point(field_get:AnimatorParamMsg.paramName)
  return _internal_paramname();
}
inline void AnimatorParamMsg::set_paramname(const std::string& value) {
  _internal_set_paramname(value);
  // @@protoc_insertion_point(field_set:AnimatorParamMsg.paramName)
}
inline std::string* AnimatorParamMsg::mutable_paramname() {
  // @@protoc_insertion_point(field_mutable:AnimatorParamMsg.paramName)
  return _internal_mutable_paramname();
}
inline const std::string& AnimatorParamMsg::_internal_paramname() const {
  return paramname_.Get();
}
inline void AnimatorParamMsg::_internal_set_paramname(const std::string& value) {
  
  paramname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnimatorParamMsg::set_paramname(std::string&& value) {
  
  paramname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AnimatorParamMsg.paramName)
}
inline void AnimatorParamMsg::set_paramname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paramname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AnimatorParamMsg.paramName)
}
inline void AnimatorParamMsg::set_paramname(const char* value,
    size_t size) {
  
  paramname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AnimatorParamMsg.paramName)
}
inline std::string* AnimatorParamMsg::_internal_mutable_paramname() {
  
  return paramname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnimatorParamMsg::release_paramname() {
  // @@protoc_insertion_point(field_release:AnimatorParamMsg.paramName)
  return paramname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimatorParamMsg::set_allocated_paramname(std::string* paramname) {
  if (paramname != nullptr) {
    
  } else {
    
  }
  paramname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AnimatorParamMsg.paramName)
}
inline std::string* AnimatorParamMsg::unsafe_arena_release_paramname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AnimatorParamMsg.paramName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return paramname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AnimatorParamMsg::unsafe_arena_set_allocated_paramname(
    std::string* paramname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramname != nullptr) {
    
  } else {
    
  }
  paramname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AnimatorParamMsg.paramName)
}

// int32 value = 3;
inline void AnimatorParamMsg::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimatorParamMsg::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimatorParamMsg::value() const {
  // @@protoc_insertion_point(field_get:AnimatorParamMsg.value)
  return _internal_value();
}
inline void AnimatorParamMsg::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void AnimatorParamMsg::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:AnimatorParamMsg.value)
}

// string gunName = 4;
inline void AnimatorParamMsg::clear_gunname() {
  gunname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnimatorParamMsg::gunname() const {
  // @@protoc_insertion_point(field_get:AnimatorParamMsg.gunName)
  return _internal_gunname();
}
inline void AnimatorParamMsg::set_gunname(const std::string& value) {
  _internal_set_gunname(value);
  // @@protoc_insertion_point(field_set:AnimatorParamMsg.gunName)
}
inline std::string* AnimatorParamMsg::mutable_gunname() {
  // @@protoc_insertion_point(field_mutable:AnimatorParamMsg.gunName)
  return _internal_mutable_gunname();
}
inline const std::string& AnimatorParamMsg::_internal_gunname() const {
  return gunname_.Get();
}
inline void AnimatorParamMsg::_internal_set_gunname(const std::string& value) {
  
  gunname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnimatorParamMsg::set_gunname(std::string&& value) {
  
  gunname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AnimatorParamMsg.gunName)
}
inline void AnimatorParamMsg::set_gunname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gunname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AnimatorParamMsg.gunName)
}
inline void AnimatorParamMsg::set_gunname(const char* value,
    size_t size) {
  
  gunname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AnimatorParamMsg.gunName)
}
inline std::string* AnimatorParamMsg::_internal_mutable_gunname() {
  
  return gunname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnimatorParamMsg::release_gunname() {
  // @@protoc_insertion_point(field_release:AnimatorParamMsg.gunName)
  return gunname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimatorParamMsg::set_allocated_gunname(std::string* gunname) {
  if (gunname != nullptr) {
    
  } else {
    
  }
  gunname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gunname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AnimatorParamMsg.gunName)
}
inline std::string* AnimatorParamMsg::unsafe_arena_release_gunname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AnimatorParamMsg.gunName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gunname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AnimatorParamMsg::unsafe_arena_set_allocated_gunname(
    std::string* gunname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gunname != nullptr) {
    
  } else {
    
  }
  gunname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gunname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AnimatorParamMsg.gunName)
}

// -------------------------------------------------------------------

// LogoutMsg

// int32 client_id = 1;
inline void LogoutMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutMsg::client_id() const {
  // @@protoc_insertion_point(field_get:LogoutMsg.client_id)
  return _internal_client_id();
}
inline void LogoutMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void LogoutMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:LogoutMsg.client_id)
}

// -------------------------------------------------------------------

// RankScoreMsg

// int32 client_id = 1;
inline void RankScoreMsg::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankScoreMsg::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankScoreMsg::client_id() const {
  // @@protoc_insertion_point(field_get:RankScoreMsg.client_id)
  return _internal_client_id();
}
inline void RankScoreMsg::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void RankScoreMsg::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:RankScoreMsg.client_id)
}

// int32 score = 2;
inline void RankScoreMsg::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankScoreMsg::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankScoreMsg::score() const {
  // @@protoc_insertion_point(field_get:RankScoreMsg.score)
  return _internal_score();
}
inline void RankScoreMsg::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void RankScoreMsg::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:RankScoreMsg.score)
}

// -------------------------------------------------------------------

// RankListMsg

// repeated .RankScoreMsg rankList = 1;
inline int RankListMsg::_internal_ranklist_size() const {
  return ranklist_.size();
}
inline int RankListMsg::ranklist_size() const {
  return _internal_ranklist_size();
}
inline void RankListMsg::clear_ranklist() {
  ranklist_.Clear();
}
inline ::RankScoreMsg* RankListMsg::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:RankListMsg.rankList)
  return ranklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankScoreMsg >*
RankListMsg::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:RankListMsg.rankList)
  return &ranklist_;
}
inline const ::RankScoreMsg& RankListMsg::_internal_ranklist(int index) const {
  return ranklist_.Get(index);
}
inline const ::RankScoreMsg& RankListMsg::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:RankListMsg.rankList)
  return _internal_ranklist(index);
}
inline ::RankScoreMsg* RankListMsg::_internal_add_ranklist() {
  return ranklist_.Add();
}
inline ::RankScoreMsg* RankListMsg::add_ranklist() {
  // @@protoc_insertion_point(field_add:RankListMsg.rankList)
  return _internal_add_ranklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankScoreMsg >&
RankListMsg::ranklist() const {
  // @@protoc_insertion_point(field_list:RankListMsg.rankList)
  return ranklist_;
}

// -------------------------------------------------------------------

// FullMessage

// .MessageHeader header = 1;
inline bool FullMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool FullMessage::has_header() const {
  return _internal_has_header();
}
inline void FullMessage::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::MessageHeader& FullMessage::_internal_header() const {
  const ::MessageHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageHeader*>(
      &::_MessageHeader_default_instance_);
}
inline const ::MessageHeader& FullMessage::header() const {
  // @@protoc_insertion_point(field_get:FullMessage.header)
  return _internal_header();
}
inline void FullMessage::unsafe_arena_set_allocated_header(
    ::MessageHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.header)
}
inline ::MessageHeader* FullMessage::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MessageHeader* FullMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:FullMessage.header)
  
  ::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::MessageHeader* FullMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::MessageHeader* FullMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:FullMessage.header)
  return _internal_mutable_header();
}
inline void FullMessage::set_allocated_header(::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:FullMessage.header)
}

// .LoginInRequest login_req = 2;
inline bool FullMessage::_internal_has_login_req() const {
  return payload_case() == kLoginReq;
}
inline bool FullMessage::has_login_req() const {
  return _internal_has_login_req();
}
inline void FullMessage::set_has_login_req() {
  _oneof_case_[0] = kLoginReq;
}
inline void FullMessage::clear_login_req() {
  if (_internal_has_login_req()) {
    if (GetArena() == nullptr) {
      delete payload_.login_req_;
    }
    clear_has_payload();
  }
}
inline ::LoginInRequest* FullMessage::release_login_req() {
  // @@protoc_insertion_point(field_release:FullMessage.login_req)
  if (_internal_has_login_req()) {
    clear_has_payload();
      ::LoginInRequest* temp = payload_.login_req_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.login_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginInRequest& FullMessage::_internal_login_req() const {
  return _internal_has_login_req()
      ? *payload_.login_req_
      : *reinterpret_cast< ::LoginInRequest*>(&::_LoginInRequest_default_instance_);
}
inline const ::LoginInRequest& FullMessage::login_req() const {
  // @@protoc_insertion_point(field_get:FullMessage.login_req)
  return _internal_login_req();
}
inline ::LoginInRequest* FullMessage::unsafe_arena_release_login_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.login_req)
  if (_internal_has_login_req()) {
    clear_has_payload();
    ::LoginInRequest* temp = payload_.login_req_;
    payload_.login_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_login_req(::LoginInRequest* login_req) {
  clear_payload();
  if (login_req) {
    set_has_login_req();
    payload_.login_req_ = login_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.login_req)
}
inline ::LoginInRequest* FullMessage::_internal_mutable_login_req() {
  if (!_internal_has_login_req()) {
    clear_payload();
    set_has_login_req();
    payload_.login_req_ = CreateMaybeMessage< ::LoginInRequest >(GetArena());
  }
  return payload_.login_req_;
}
inline ::LoginInRequest* FullMessage::mutable_login_req() {
  // @@protoc_insertion_point(field_mutable:FullMessage.login_req)
  return _internal_mutable_login_req();
}

// .LoginInResponse login_rsp = 3;
inline bool FullMessage::_internal_has_login_rsp() const {
  return payload_case() == kLoginRsp;
}
inline bool FullMessage::has_login_rsp() const {
  return _internal_has_login_rsp();
}
inline void FullMessage::set_has_login_rsp() {
  _oneof_case_[0] = kLoginRsp;
}
inline void FullMessage::clear_login_rsp() {
  if (_internal_has_login_rsp()) {
    if (GetArena() == nullptr) {
      delete payload_.login_rsp_;
    }
    clear_has_payload();
  }
}
inline ::LoginInResponse* FullMessage::release_login_rsp() {
  // @@protoc_insertion_point(field_release:FullMessage.login_rsp)
  if (_internal_has_login_rsp()) {
    clear_has_payload();
      ::LoginInResponse* temp = payload_.login_rsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.login_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginInResponse& FullMessage::_internal_login_rsp() const {
  return _internal_has_login_rsp()
      ? *payload_.login_rsp_
      : *reinterpret_cast< ::LoginInResponse*>(&::_LoginInResponse_default_instance_);
}
inline const ::LoginInResponse& FullMessage::login_rsp() const {
  // @@protoc_insertion_point(field_get:FullMessage.login_rsp)
  return _internal_login_rsp();
}
inline ::LoginInResponse* FullMessage::unsafe_arena_release_login_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.login_rsp)
  if (_internal_has_login_rsp()) {
    clear_has_payload();
    ::LoginInResponse* temp = payload_.login_rsp_;
    payload_.login_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_login_rsp(::LoginInResponse* login_rsp) {
  clear_payload();
  if (login_rsp) {
    set_has_login_rsp();
    payload_.login_rsp_ = login_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.login_rsp)
}
inline ::LoginInResponse* FullMessage::_internal_mutable_login_rsp() {
  if (!_internal_has_login_rsp()) {
    clear_payload();
    set_has_login_rsp();
    payload_.login_rsp_ = CreateMaybeMessage< ::LoginInResponse >(GetArena());
  }
  return payload_.login_rsp_;
}
inline ::LoginInResponse* FullMessage::mutable_login_rsp() {
  // @@protoc_insertion_point(field_mutable:FullMessage.login_rsp)
  return _internal_mutable_login_rsp();
}

// .PlayerLoginMsg player_login = 4;
inline bool FullMessage::_internal_has_player_login() const {
  return payload_case() == kPlayerLogin;
}
inline bool FullMessage::has_player_login() const {
  return _internal_has_player_login();
}
inline void FullMessage::set_has_player_login() {
  _oneof_case_[0] = kPlayerLogin;
}
inline void FullMessage::clear_player_login() {
  if (_internal_has_player_login()) {
    if (GetArena() == nullptr) {
      delete payload_.player_login_;
    }
    clear_has_payload();
  }
}
inline ::PlayerLoginMsg* FullMessage::release_player_login() {
  // @@protoc_insertion_point(field_release:FullMessage.player_login)
  if (_internal_has_player_login()) {
    clear_has_payload();
      ::PlayerLoginMsg* temp = payload_.player_login_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.player_login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlayerLoginMsg& FullMessage::_internal_player_login() const {
  return _internal_has_player_login()
      ? *payload_.player_login_
      : *reinterpret_cast< ::PlayerLoginMsg*>(&::_PlayerLoginMsg_default_instance_);
}
inline const ::PlayerLoginMsg& FullMessage::player_login() const {
  // @@protoc_insertion_point(field_get:FullMessage.player_login)
  return _internal_player_login();
}
inline ::PlayerLoginMsg* FullMessage::unsafe_arena_release_player_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.player_login)
  if (_internal_has_player_login()) {
    clear_has_payload();
    ::PlayerLoginMsg* temp = payload_.player_login_;
    payload_.player_login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_player_login(::PlayerLoginMsg* player_login) {
  clear_payload();
  if (player_login) {
    set_has_player_login();
    payload_.player_login_ = player_login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.player_login)
}
inline ::PlayerLoginMsg* FullMessage::_internal_mutable_player_login() {
  if (!_internal_has_player_login()) {
    clear_payload();
    set_has_player_login();
    payload_.player_login_ = CreateMaybeMessage< ::PlayerLoginMsg >(GetArena());
  }
  return payload_.player_login_;
}
inline ::PlayerLoginMsg* FullMessage::mutable_player_login() {
  // @@protoc_insertion_point(field_mutable:FullMessage.player_login)
  return _internal_mutable_player_login();
}

// .LoadOtherPlayersMsg load_other_players = 5;
inline bool FullMessage::_internal_has_load_other_players() const {
  return payload_case() == kLoadOtherPlayers;
}
inline bool FullMessage::has_load_other_players() const {
  return _internal_has_load_other_players();
}
inline void FullMessage::set_has_load_other_players() {
  _oneof_case_[0] = kLoadOtherPlayers;
}
inline void FullMessage::clear_load_other_players() {
  if (_internal_has_load_other_players()) {
    if (GetArena() == nullptr) {
      delete payload_.load_other_players_;
    }
    clear_has_payload();
  }
}
inline ::LoadOtherPlayersMsg* FullMessage::release_load_other_players() {
  // @@protoc_insertion_point(field_release:FullMessage.load_other_players)
  if (_internal_has_load_other_players()) {
    clear_has_payload();
      ::LoadOtherPlayersMsg* temp = payload_.load_other_players_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.load_other_players_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoadOtherPlayersMsg& FullMessage::_internal_load_other_players() const {
  return _internal_has_load_other_players()
      ? *payload_.load_other_players_
      : *reinterpret_cast< ::LoadOtherPlayersMsg*>(&::_LoadOtherPlayersMsg_default_instance_);
}
inline const ::LoadOtherPlayersMsg& FullMessage::load_other_players() const {
  // @@protoc_insertion_point(field_get:FullMessage.load_other_players)
  return _internal_load_other_players();
}
inline ::LoadOtherPlayersMsg* FullMessage::unsafe_arena_release_load_other_players() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.load_other_players)
  if (_internal_has_load_other_players()) {
    clear_has_payload();
    ::LoadOtherPlayersMsg* temp = payload_.load_other_players_;
    payload_.load_other_players_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_load_other_players(::LoadOtherPlayersMsg* load_other_players) {
  clear_payload();
  if (load_other_players) {
    set_has_load_other_players();
    payload_.load_other_players_ = load_other_players;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.load_other_players)
}
inline ::LoadOtherPlayersMsg* FullMessage::_internal_mutable_load_other_players() {
  if (!_internal_has_load_other_players()) {
    clear_payload();
    set_has_load_other_players();
    payload_.load_other_players_ = CreateMaybeMessage< ::LoadOtherPlayersMsg >(GetArena());
  }
  return payload_.load_other_players_;
}
inline ::LoadOtherPlayersMsg* FullMessage::mutable_load_other_players() {
  // @@protoc_insertion_point(field_mutable:FullMessage.load_other_players)
  return _internal_mutable_load_other_players();
}

// .PlayerStateMsg player_state = 6;
inline bool FullMessage::_internal_has_player_state() const {
  return payload_case() == kPlayerState;
}
inline bool FullMessage::has_player_state() const {
  return _internal_has_player_state();
}
inline void FullMessage::set_has_player_state() {
  _oneof_case_[0] = kPlayerState;
}
inline void FullMessage::clear_player_state() {
  if (_internal_has_player_state()) {
    if (GetArena() == nullptr) {
      delete payload_.player_state_;
    }
    clear_has_payload();
  }
}
inline ::PlayerStateMsg* FullMessage::release_player_state() {
  // @@protoc_insertion_point(field_release:FullMessage.player_state)
  if (_internal_has_player_state()) {
    clear_has_payload();
      ::PlayerStateMsg* temp = payload_.player_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.player_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlayerStateMsg& FullMessage::_internal_player_state() const {
  return _internal_has_player_state()
      ? *payload_.player_state_
      : *reinterpret_cast< ::PlayerStateMsg*>(&::_PlayerStateMsg_default_instance_);
}
inline const ::PlayerStateMsg& FullMessage::player_state() const {
  // @@protoc_insertion_point(field_get:FullMessage.player_state)
  return _internal_player_state();
}
inline ::PlayerStateMsg* FullMessage::unsafe_arena_release_player_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.player_state)
  if (_internal_has_player_state()) {
    clear_has_payload();
    ::PlayerStateMsg* temp = payload_.player_state_;
    payload_.player_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_player_state(::PlayerStateMsg* player_state) {
  clear_payload();
  if (player_state) {
    set_has_player_state();
    payload_.player_state_ = player_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.player_state)
}
inline ::PlayerStateMsg* FullMessage::_internal_mutable_player_state() {
  if (!_internal_has_player_state()) {
    clear_payload();
    set_has_player_state();
    payload_.player_state_ = CreateMaybeMessage< ::PlayerStateMsg >(GetArena());
  }
  return payload_.player_state_;
}
inline ::PlayerStateMsg* FullMessage::mutable_player_state() {
  // @@protoc_insertion_point(field_mutable:FullMessage.player_state)
  return _internal_mutable_player_state();
}

// .GunInfoMsg gun_info = 7;
inline bool FullMessage::_internal_has_gun_info() const {
  return payload_case() == kGunInfo;
}
inline bool FullMessage::has_gun_info() const {
  return _internal_has_gun_info();
}
inline void FullMessage::set_has_gun_info() {
  _oneof_case_[0] = kGunInfo;
}
inline void FullMessage::clear_gun_info() {
  if (_internal_has_gun_info()) {
    if (GetArena() == nullptr) {
      delete payload_.gun_info_;
    }
    clear_has_payload();
  }
}
inline ::GunInfoMsg* FullMessage::release_gun_info() {
  // @@protoc_insertion_point(field_release:FullMessage.gun_info)
  if (_internal_has_gun_info()) {
    clear_has_payload();
      ::GunInfoMsg* temp = payload_.gun_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.gun_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GunInfoMsg& FullMessage::_internal_gun_info() const {
  return _internal_has_gun_info()
      ? *payload_.gun_info_
      : *reinterpret_cast< ::GunInfoMsg*>(&::_GunInfoMsg_default_instance_);
}
inline const ::GunInfoMsg& FullMessage::gun_info() const {
  // @@protoc_insertion_point(field_get:FullMessage.gun_info)
  return _internal_gun_info();
}
inline ::GunInfoMsg* FullMessage::unsafe_arena_release_gun_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.gun_info)
  if (_internal_has_gun_info()) {
    clear_has_payload();
    ::GunInfoMsg* temp = payload_.gun_info_;
    payload_.gun_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_gun_info(::GunInfoMsg* gun_info) {
  clear_payload();
  if (gun_info) {
    set_has_gun_info();
    payload_.gun_info_ = gun_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.gun_info)
}
inline ::GunInfoMsg* FullMessage::_internal_mutable_gun_info() {
  if (!_internal_has_gun_info()) {
    clear_payload();
    set_has_gun_info();
    payload_.gun_info_ = CreateMaybeMessage< ::GunInfoMsg >(GetArena());
  }
  return payload_.gun_info_;
}
inline ::GunInfoMsg* FullMessage::mutable_gun_info() {
  // @@protoc_insertion_point(field_mutable:FullMessage.gun_info)
  return _internal_mutable_gun_info();
}

// .GunFireMsg gun_fire = 8;
inline bool FullMessage::_internal_has_gun_fire() const {
  return payload_case() == kGunFire;
}
inline bool FullMessage::has_gun_fire() const {
  return _internal_has_gun_fire();
}
inline void FullMessage::set_has_gun_fire() {
  _oneof_case_[0] = kGunFire;
}
inline void FullMessage::clear_gun_fire() {
  if (_internal_has_gun_fire()) {
    if (GetArena() == nullptr) {
      delete payload_.gun_fire_;
    }
    clear_has_payload();
  }
}
inline ::GunFireMsg* FullMessage::release_gun_fire() {
  // @@protoc_insertion_point(field_release:FullMessage.gun_fire)
  if (_internal_has_gun_fire()) {
    clear_has_payload();
      ::GunFireMsg* temp = payload_.gun_fire_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.gun_fire_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GunFireMsg& FullMessage::_internal_gun_fire() const {
  return _internal_has_gun_fire()
      ? *payload_.gun_fire_
      : *reinterpret_cast< ::GunFireMsg*>(&::_GunFireMsg_default_instance_);
}
inline const ::GunFireMsg& FullMessage::gun_fire() const {
  // @@protoc_insertion_point(field_get:FullMessage.gun_fire)
  return _internal_gun_fire();
}
inline ::GunFireMsg* FullMessage::unsafe_arena_release_gun_fire() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.gun_fire)
  if (_internal_has_gun_fire()) {
    clear_has_payload();
    ::GunFireMsg* temp = payload_.gun_fire_;
    payload_.gun_fire_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_gun_fire(::GunFireMsg* gun_fire) {
  clear_payload();
  if (gun_fire) {
    set_has_gun_fire();
    payload_.gun_fire_ = gun_fire;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.gun_fire)
}
inline ::GunFireMsg* FullMessage::_internal_mutable_gun_fire() {
  if (!_internal_has_gun_fire()) {
    clear_payload();
    set_has_gun_fire();
    payload_.gun_fire_ = CreateMaybeMessage< ::GunFireMsg >(GetArena());
  }
  return payload_.gun_fire_;
}
inline ::GunFireMsg* FullMessage::mutable_gun_fire() {
  // @@protoc_insertion_point(field_mutable:FullMessage.gun_fire)
  return _internal_mutable_gun_fire();
}

// .ReloadBulletMsg reload_bullet = 9;
inline bool FullMessage::_internal_has_reload_bullet() const {
  return payload_case() == kReloadBullet;
}
inline bool FullMessage::has_reload_bullet() const {
  return _internal_has_reload_bullet();
}
inline void FullMessage::set_has_reload_bullet() {
  _oneof_case_[0] = kReloadBullet;
}
inline void FullMessage::clear_reload_bullet() {
  if (_internal_has_reload_bullet()) {
    if (GetArena() == nullptr) {
      delete payload_.reload_bullet_;
    }
    clear_has_payload();
  }
}
inline ::ReloadBulletMsg* FullMessage::release_reload_bullet() {
  // @@protoc_insertion_point(field_release:FullMessage.reload_bullet)
  if (_internal_has_reload_bullet()) {
    clear_has_payload();
      ::ReloadBulletMsg* temp = payload_.reload_bullet_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.reload_bullet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ReloadBulletMsg& FullMessage::_internal_reload_bullet() const {
  return _internal_has_reload_bullet()
      ? *payload_.reload_bullet_
      : *reinterpret_cast< ::ReloadBulletMsg*>(&::_ReloadBulletMsg_default_instance_);
}
inline const ::ReloadBulletMsg& FullMessage::reload_bullet() const {
  // @@protoc_insertion_point(field_get:FullMessage.reload_bullet)
  return _internal_reload_bullet();
}
inline ::ReloadBulletMsg* FullMessage::unsafe_arena_release_reload_bullet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.reload_bullet)
  if (_internal_has_reload_bullet()) {
    clear_has_payload();
    ::ReloadBulletMsg* temp = payload_.reload_bullet_;
    payload_.reload_bullet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_reload_bullet(::ReloadBulletMsg* reload_bullet) {
  clear_payload();
  if (reload_bullet) {
    set_has_reload_bullet();
    payload_.reload_bullet_ = reload_bullet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.reload_bullet)
}
inline ::ReloadBulletMsg* FullMessage::_internal_mutable_reload_bullet() {
  if (!_internal_has_reload_bullet()) {
    clear_payload();
    set_has_reload_bullet();
    payload_.reload_bullet_ = CreateMaybeMessage< ::ReloadBulletMsg >(GetArena());
  }
  return payload_.reload_bullet_;
}
inline ::ReloadBulletMsg* FullMessage::mutable_reload_bullet() {
  // @@protoc_insertion_point(field_mutable:FullMessage.reload_bullet)
  return _internal_mutable_reload_bullet();
}

// .BulletHitMsg bullet_hit = 10;
inline bool FullMessage::_internal_has_bullet_hit() const {
  return payload_case() == kBulletHit;
}
inline bool FullMessage::has_bullet_hit() const {
  return _internal_has_bullet_hit();
}
inline void FullMessage::set_has_bullet_hit() {
  _oneof_case_[0] = kBulletHit;
}
inline void FullMessage::clear_bullet_hit() {
  if (_internal_has_bullet_hit()) {
    if (GetArena() == nullptr) {
      delete payload_.bullet_hit_;
    }
    clear_has_payload();
  }
}
inline ::BulletHitMsg* FullMessage::release_bullet_hit() {
  // @@protoc_insertion_point(field_release:FullMessage.bullet_hit)
  if (_internal_has_bullet_hit()) {
    clear_has_payload();
      ::BulletHitMsg* temp = payload_.bullet_hit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.bullet_hit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BulletHitMsg& FullMessage::_internal_bullet_hit() const {
  return _internal_has_bullet_hit()
      ? *payload_.bullet_hit_
      : *reinterpret_cast< ::BulletHitMsg*>(&::_BulletHitMsg_default_instance_);
}
inline const ::BulletHitMsg& FullMessage::bullet_hit() const {
  // @@protoc_insertion_point(field_get:FullMessage.bullet_hit)
  return _internal_bullet_hit();
}
inline ::BulletHitMsg* FullMessage::unsafe_arena_release_bullet_hit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.bullet_hit)
  if (_internal_has_bullet_hit()) {
    clear_has_payload();
    ::BulletHitMsg* temp = payload_.bullet_hit_;
    payload_.bullet_hit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_bullet_hit(::BulletHitMsg* bullet_hit) {
  clear_payload();
  if (bullet_hit) {
    set_has_bullet_hit();
    payload_.bullet_hit_ = bullet_hit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.bullet_hit)
}
inline ::BulletHitMsg* FullMessage::_internal_mutable_bullet_hit() {
  if (!_internal_has_bullet_hit()) {
    clear_payload();
    set_has_bullet_hit();
    payload_.bullet_hit_ = CreateMaybeMessage< ::BulletHitMsg >(GetArena());
  }
  return payload_.bullet_hit_;
}
inline ::BulletHitMsg* FullMessage::mutable_bullet_hit() {
  // @@protoc_insertion_point(field_mutable:FullMessage.bullet_hit)
  return _internal_mutable_bullet_hit();
}

// .AnimatorParamMsg animator_param = 11;
inline bool FullMessage::_internal_has_animator_param() const {
  return payload_case() == kAnimatorParam;
}
inline bool FullMessage::has_animator_param() const {
  return _internal_has_animator_param();
}
inline void FullMessage::set_has_animator_param() {
  _oneof_case_[0] = kAnimatorParam;
}
inline void FullMessage::clear_animator_param() {
  if (_internal_has_animator_param()) {
    if (GetArena() == nullptr) {
      delete payload_.animator_param_;
    }
    clear_has_payload();
  }
}
inline ::AnimatorParamMsg* FullMessage::release_animator_param() {
  // @@protoc_insertion_point(field_release:FullMessage.animator_param)
  if (_internal_has_animator_param()) {
    clear_has_payload();
      ::AnimatorParamMsg* temp = payload_.animator_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.animator_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AnimatorParamMsg& FullMessage::_internal_animator_param() const {
  return _internal_has_animator_param()
      ? *payload_.animator_param_
      : *reinterpret_cast< ::AnimatorParamMsg*>(&::_AnimatorParamMsg_default_instance_);
}
inline const ::AnimatorParamMsg& FullMessage::animator_param() const {
  // @@protoc_insertion_point(field_get:FullMessage.animator_param)
  return _internal_animator_param();
}
inline ::AnimatorParamMsg* FullMessage::unsafe_arena_release_animator_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.animator_param)
  if (_internal_has_animator_param()) {
    clear_has_payload();
    ::AnimatorParamMsg* temp = payload_.animator_param_;
    payload_.animator_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_animator_param(::AnimatorParamMsg* animator_param) {
  clear_payload();
  if (animator_param) {
    set_has_animator_param();
    payload_.animator_param_ = animator_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.animator_param)
}
inline ::AnimatorParamMsg* FullMessage::_internal_mutable_animator_param() {
  if (!_internal_has_animator_param()) {
    clear_payload();
    set_has_animator_param();
    payload_.animator_param_ = CreateMaybeMessage< ::AnimatorParamMsg >(GetArena());
  }
  return payload_.animator_param_;
}
inline ::AnimatorParamMsg* FullMessage::mutable_animator_param() {
  // @@protoc_insertion_point(field_mutable:FullMessage.animator_param)
  return _internal_mutable_animator_param();
}

// .LogoutMsg logout = 12;
inline bool FullMessage::_internal_has_logout() const {
  return payload_case() == kLogout;
}
inline bool FullMessage::has_logout() const {
  return _internal_has_logout();
}
inline void FullMessage::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
inline void FullMessage::clear_logout() {
  if (_internal_has_logout()) {
    if (GetArena() == nullptr) {
      delete payload_.logout_;
    }
    clear_has_payload();
  }
}
inline ::LogoutMsg* FullMessage::release_logout() {
  // @@protoc_insertion_point(field_release:FullMessage.logout)
  if (_internal_has_logout()) {
    clear_has_payload();
      ::LogoutMsg* temp = payload_.logout_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.logout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LogoutMsg& FullMessage::_internal_logout() const {
  return _internal_has_logout()
      ? *payload_.logout_
      : *reinterpret_cast< ::LogoutMsg*>(&::_LogoutMsg_default_instance_);
}
inline const ::LogoutMsg& FullMessage::logout() const {
  // @@protoc_insertion_point(field_get:FullMessage.logout)
  return _internal_logout();
}
inline ::LogoutMsg* FullMessage::unsafe_arena_release_logout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.logout)
  if (_internal_has_logout()) {
    clear_has_payload();
    ::LogoutMsg* temp = payload_.logout_;
    payload_.logout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_logout(::LogoutMsg* logout) {
  clear_payload();
  if (logout) {
    set_has_logout();
    payload_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.logout)
}
inline ::LogoutMsg* FullMessage::_internal_mutable_logout() {
  if (!_internal_has_logout()) {
    clear_payload();
    set_has_logout();
    payload_.logout_ = CreateMaybeMessage< ::LogoutMsg >(GetArena());
  }
  return payload_.logout_;
}
inline ::LogoutMsg* FullMessage::mutable_logout() {
  // @@protoc_insertion_point(field_mutable:FullMessage.logout)
  return _internal_mutable_logout();
}

// .RankScoreMsg rank_score = 13;
inline bool FullMessage::_internal_has_rank_score() const {
  return payload_case() == kRankScore;
}
inline bool FullMessage::has_rank_score() const {
  return _internal_has_rank_score();
}
inline void FullMessage::set_has_rank_score() {
  _oneof_case_[0] = kRankScore;
}
inline void FullMessage::clear_rank_score() {
  if (_internal_has_rank_score()) {
    if (GetArena() == nullptr) {
      delete payload_.rank_score_;
    }
    clear_has_payload();
  }
}
inline ::RankScoreMsg* FullMessage::release_rank_score() {
  // @@protoc_insertion_point(field_release:FullMessage.rank_score)
  if (_internal_has_rank_score()) {
    clear_has_payload();
      ::RankScoreMsg* temp = payload_.rank_score_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.rank_score_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RankScoreMsg& FullMessage::_internal_rank_score() const {
  return _internal_has_rank_score()
      ? *payload_.rank_score_
      : *reinterpret_cast< ::RankScoreMsg*>(&::_RankScoreMsg_default_instance_);
}
inline const ::RankScoreMsg& FullMessage::rank_score() const {
  // @@protoc_insertion_point(field_get:FullMessage.rank_score)
  return _internal_rank_score();
}
inline ::RankScoreMsg* FullMessage::unsafe_arena_release_rank_score() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.rank_score)
  if (_internal_has_rank_score()) {
    clear_has_payload();
    ::RankScoreMsg* temp = payload_.rank_score_;
    payload_.rank_score_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_rank_score(::RankScoreMsg* rank_score) {
  clear_payload();
  if (rank_score) {
    set_has_rank_score();
    payload_.rank_score_ = rank_score;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.rank_score)
}
inline ::RankScoreMsg* FullMessage::_internal_mutable_rank_score() {
  if (!_internal_has_rank_score()) {
    clear_payload();
    set_has_rank_score();
    payload_.rank_score_ = CreateMaybeMessage< ::RankScoreMsg >(GetArena());
  }
  return payload_.rank_score_;
}
inline ::RankScoreMsg* FullMessage::mutable_rank_score() {
  // @@protoc_insertion_point(field_mutable:FullMessage.rank_score)
  return _internal_mutable_rank_score();
}

// .RankListMsg rank_list = 14;
inline bool FullMessage::_internal_has_rank_list() const {
  return payload_case() == kRankList;
}
inline bool FullMessage::has_rank_list() const {
  return _internal_has_rank_list();
}
inline void FullMessage::set_has_rank_list() {
  _oneof_case_[0] = kRankList;
}
inline void FullMessage::clear_rank_list() {
  if (_internal_has_rank_list()) {
    if (GetArena() == nullptr) {
      delete payload_.rank_list_;
    }
    clear_has_payload();
  }
}
inline ::RankListMsg* FullMessage::release_rank_list() {
  // @@protoc_insertion_point(field_release:FullMessage.rank_list)
  if (_internal_has_rank_list()) {
    clear_has_payload();
      ::RankListMsg* temp = payload_.rank_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.rank_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RankListMsg& FullMessage::_internal_rank_list() const {
  return _internal_has_rank_list()
      ? *payload_.rank_list_
      : *reinterpret_cast< ::RankListMsg*>(&::_RankListMsg_default_instance_);
}
inline const ::RankListMsg& FullMessage::rank_list() const {
  // @@protoc_insertion_point(field_get:FullMessage.rank_list)
  return _internal_rank_list();
}
inline ::RankListMsg* FullMessage::unsafe_arena_release_rank_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FullMessage.rank_list)
  if (_internal_has_rank_list()) {
    clear_has_payload();
    ::RankListMsg* temp = payload_.rank_list_;
    payload_.rank_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullMessage::unsafe_arena_set_allocated_rank_list(::RankListMsg* rank_list) {
  clear_payload();
  if (rank_list) {
    set_has_rank_list();
    payload_.rank_list_ = rank_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FullMessage.rank_list)
}
inline ::RankListMsg* FullMessage::_internal_mutable_rank_list() {
  if (!_internal_has_rank_list()) {
    clear_payload();
    set_has_rank_list();
    payload_.rank_list_ = CreateMaybeMessage< ::RankListMsg >(GetArena());
  }
  return payload_.rank_list_;
}
inline ::RankListMsg* FullMessage::mutable_rank_list() {
  // @@protoc_insertion_point(field_mutable:FullMessage.rank_list)
  return _internal_mutable_rank_list();
}

inline bool FullMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void FullMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline FullMessage::PayloadCase FullMessage::payload_case() const {
  return FullMessage::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
